{"ast":null,"code":"import { createElement } from \"react\";\nimport { TextIconSpacing } from \"@react-md/icon\";\n/**\n * A type guard that simply checks if the option is considered an object of list\n * item props.\n *\n * @param option - The option to check\n * @returns true if the option is considered a object of list item props and\n * will ensure that the option is typed as ListboxOptionProps\n * @internal\n */\n\nexport function isListboxOptionProps(option) {\n  return option !== \"\" && option !== 0 && !!option && typeof option === \"object\";\n}\n/**\n * The default implementation to check if an option is disabled. It will just\n * check if the option is an object and if it has the disabled prop enabled.\n *\n * @param option - The option to check\n * @returns true if the option is disabled\n * @internal\n */\n\nexport function defaultIsOptionDisabled(option) {\n  return isListboxOptionProps(option) && !!option.disabled;\n}\n/**\n * The default way to generate a \"unique\" id for each option within the listbox\n * by concatenating the current index with a base id.\n *\n * Note: The index will be incremented by 1 so the ids start from 1 instead of\n * 0. This is so that it matches how paginated results work with `aria-posinset`\n * + `aria-setsize`.\n *\n * @param baseId - The base id of the listbox.\n * @param index - The current index of the option\n * @returns a \"unique\" id for the option\n */\n\nexport function getOptionId(baseId, index) {\n  return baseId + \"-option-\" + (index + 1);\n}\n/**\n * A function that will get the label for an option. The default behavior is to\n * check if the option is an object. If it is, it'll use the `labelKey` property\n * and fallback to the `children` property. If it is anything else, the option\n * itself will be returned.\n *\n * This is used in both the select's button element to show the current value as\n * well as rendering each option within the listbox component.\n *\n * @param option - The option that should be converted into a renderable label\n * element.\n * @param labelKey - The object key to use to extract the label from an option\n * object.\n * @returns a renderable label to display.\n */\n\nexport function getOptionLabel(option, labelKey) {\n  if (isListboxOptionProps(option)) {\n    if (typeof option.children !== \"undefined\") {\n      return option.children;\n    }\n\n    var label = option[labelKey];\n    return typeof label === \"undefined\" ? null : label;\n  }\n\n  return option;\n}\n/**\n * A function that will get the display value for the `Select` field based on\n * the current selected option. The default behavior will be to return null if\n * an option is not currently selected so the placeholder text can be shown\n * instead. If there is an option selected, it will:\n * - get the option's label using the general `getOptionLabel` util\n * - check if includeLeft is enabled and the option is an object with\n *   `leftAddon`\n *   - if there is a `leftAddon`, use the `TextIconSpacing` of\n *     the label + the icon or avatar.\n *\n * @param option - The option to get a display label for\n * @param labelKey - The key to use to extract a label from the option when it\n * is an object\n * @param includeLeft - Boolean if a `leftAddon` should be added with\n * `TextIconSpacing` to the result.\n * @returns A renderable node to display in a `Select` field.\n */\n\nexport function getDisplayLabel(option, labelKey, includeLeft) {\n  if (!option && option !== 0) {\n    return null;\n  }\n\n  var label = getOptionLabel(option, labelKey);\n\n  if (!includeLeft || !isListboxOptionProps(option)) {\n    return label;\n  }\n\n  var leftAddon = option.leftAddon;\n  return createElement(TextIconSpacing, {\n    icon: leftAddon\n  }, label);\n}","map":{"version":3,"sources":["../../src/select/utils.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAyC,OAAzC;AACA,SAAS,eAAT,QAAgC,gBAAhC;AASA;;;;;;;;AAQG;;AACH,OAAM,SAAU,oBAAV,CACJ,MADI,EACiB;AAErB,SACE,MAAM,KAAK,EAAX,IAAiB,MAAM,KAAK,CAA5B,IAAiC,CAAC,CAAC,MAAnC,IAA6C,OAAO,MAAP,KAAkB,QADjE;AAGD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,uBAAV,CAAkC,MAAlC,EAAuD;AAC3D,SAAO,oBAAoB,CAAC,MAAD,CAApB,IAAgC,CAAC,CAAC,MAAM,CAAC,QAAhD;AACD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAsC,KAAtC,EAAmD;AACvD,SAAU,MAAM,GAAA,UAAN,IAAiB,KAAK,GAAG,CAAzB,CAAV;AACD;AAED;;;;;;;;;;;;;;AAcG;;AACH,OAAM,SAAU,cAAV,CACJ,MADI,EAEJ,QAFI,EAEY;AAEhB,MAAI,oBAAoB,CAAC,MAAD,CAAxB,EAAkC;AAChC,QAAI,OAAO,MAAM,CAAC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,aAAO,MAAM,CAAC,QAAd;AACD;;AAED,QAAM,KAAK,GAAG,MAAM,CAAC,QAAD,CAApB;AACA,WAAO,OAAO,KAAP,KAAiB,WAAjB,GAA+B,IAA/B,GAAsC,KAA7C;AACD;;AAED,SAAO,MAAP;AACD;AAED;;;;;;;;;;;;;;;;;AAiBG;;AACH,OAAM,SAAU,eAAV,CACJ,MADI,EAEJ,QAFI,EAGJ,WAHI,EAGgB;AAEpB,MAAI,CAAC,MAAD,IAAW,MAAM,KAAK,CAA1B,EAA6B;AAC3B,WAAO,IAAP;AACD;;AAED,MAAM,KAAK,GAAG,cAAc,CAAC,MAAD,EAAS,QAAT,CAA5B;;AACA,MAAI,CAAC,WAAD,IAAgB,CAAC,oBAAoB,CAAC,MAAD,CAAzC,EAAmD;AACjD,WAAO,KAAP;AACD;;AAEO,MAAA,SAAS,GAAK,MAAM,CAAX,SAAT;AAER,SAAO,aAAa,CAAC,eAAD,EAAkB;AAAE,IAAA,IAAI,EAAE;AAAR,GAAlB,EAAuC,KAAvC,CAApB;AACD","sourceRoot":"","sourcesContent":["import { createElement } from \"react\";\nimport { TextIconSpacing } from \"@react-md/icon\";\n/**\n * A type guard that simply checks if the option is considered an object of list\n * item props.\n *\n * @param option - The option to check\n * @returns true if the option is considered a object of list item props and\n * will ensure that the option is typed as ListboxOptionProps\n * @internal\n */\nexport function isListboxOptionProps(option) {\n    return (option !== \"\" && option !== 0 && !!option && typeof option === \"object\");\n}\n/**\n * The default implementation to check if an option is disabled. It will just\n * check if the option is an object and if it has the disabled prop enabled.\n *\n * @param option - The option to check\n * @returns true if the option is disabled\n * @internal\n */\nexport function defaultIsOptionDisabled(option) {\n    return isListboxOptionProps(option) && !!option.disabled;\n}\n/**\n * The default way to generate a \"unique\" id for each option within the listbox\n * by concatenating the current index with a base id.\n *\n * Note: The index will be incremented by 1 so the ids start from 1 instead of\n * 0. This is so that it matches how paginated results work with `aria-posinset`\n * + `aria-setsize`.\n *\n * @param baseId - The base id of the listbox.\n * @param index - The current index of the option\n * @returns a \"unique\" id for the option\n */\nexport function getOptionId(baseId, index) {\n    return baseId + \"-option-\" + (index + 1);\n}\n/**\n * A function that will get the label for an option. The default behavior is to\n * check if the option is an object. If it is, it'll use the `labelKey` property\n * and fallback to the `children` property. If it is anything else, the option\n * itself will be returned.\n *\n * This is used in both the select's button element to show the current value as\n * well as rendering each option within the listbox component.\n *\n * @param option - The option that should be converted into a renderable label\n * element.\n * @param labelKey - The object key to use to extract the label from an option\n * object.\n * @returns a renderable label to display.\n */\nexport function getOptionLabel(option, labelKey) {\n    if (isListboxOptionProps(option)) {\n        if (typeof option.children !== \"undefined\") {\n            return option.children;\n        }\n        var label = option[labelKey];\n        return typeof label === \"undefined\" ? null : label;\n    }\n    return option;\n}\n/**\n * A function that will get the display value for the `Select` field based on\n * the current selected option. The default behavior will be to return null if\n * an option is not currently selected so the placeholder text can be shown\n * instead. If there is an option selected, it will:\n * - get the option's label using the general `getOptionLabel` util\n * - check if includeLeft is enabled and the option is an object with\n *   `leftAddon`\n *   - if there is a `leftAddon`, use the `TextIconSpacing` of\n *     the label + the icon or avatar.\n *\n * @param option - The option to get a display label for\n * @param labelKey - The key to use to extract a label from the option when it\n * is an object\n * @param includeLeft - Boolean if a `leftAddon` should be added with\n * `TextIconSpacing` to the result.\n * @returns A renderable node to display in a `Select` field.\n */\nexport function getDisplayLabel(option, labelKey, includeLeft) {\n    if (!option && option !== 0) {\n        return null;\n    }\n    var label = getOptionLabel(option, labelKey);\n    if (!includeLeft || !isListboxOptionProps(option)) {\n        return label;\n    }\n    var leftAddon = option.leftAddon;\n    return createElement(TextIconSpacing, { icon: leftAddon }, label);\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}