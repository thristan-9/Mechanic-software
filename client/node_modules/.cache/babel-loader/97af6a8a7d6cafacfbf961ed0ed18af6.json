{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, useCallback, useState } from \"react\";\nimport { applyRef } from \"@react-md/utils\";\nimport { Divider } from \"./Divider\";\n/**\n * This is a small hook that is used to automatically create a vertical divider\n * based on the computed height of its parent element.\n *\n * @param maxHeight - The max height for the vertical divider. When the value is\n * between 0 and 1, it will be used as a percentage. Otherwise the smaller value\n * of parent element height and this will be used.\n */\n\nexport function useVerticalDividerHeight(maxHeight, forwardedRef) {\n  if (process.env.NODE_ENV !== \"production\" && maxHeight < 0) {\n    throw new Error(\"The `maxHeight` for a vertical divider height must be greater than 0\");\n  }\n\n  var _a = useState(undefined),\n      height = _a[0],\n      setHeight = _a[1];\n\n  var ref = useCallback(function (instance) {\n    applyRef(instance, forwardedRef);\n\n    if (!instance || !instance.parentElement) {\n      return;\n    }\n\n    var height = instance.parentElement.offsetHeight;\n\n    if (maxHeight <= 1) {\n      setHeight(height * maxHeight);\n    } else {\n      setHeight(Math.min(height, maxHeight));\n    }\n  }, [maxHeight, forwardedRef]);\n  return {\n    ref: ref,\n    height: height\n  };\n}\n/**\n * This component is used to create a vertical divider based on a parent\n * element's height. This is really only needed when the parent element **has no\n * defined height**.  If there is a defined height, this component is not worth\n * much as the height can be computed in css as normal. This really just fixes\n * the issue that the height would be set to `auto` (which computes to 0 most of\n * the time) when it is not set on a parent element.\n */\n\nexport var VerticalDivider = forwardRef(function VerticalDivider(_a, forwardedRef) {\n  var style = _a.style,\n      _b = _a.maxHeight,\n      maxHeight = _b === void 0 ? 1 : _b,\n      props = __rest(_a, [\"style\", \"maxHeight\"]);\n\n  var _c = useVerticalDividerHeight(maxHeight, forwardedRef),\n      ref = _c.ref,\n      height = _c.height;\n\n  return React.createElement(Divider, __assign({}, props, {\n    style: __assign(__assign({}, style), {\n      height: height\n    }),\n    ref: ref,\n    vertical: true\n  }));\n});\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    VerticalDivider.propTypes = {\n      style: PropTypes.object,\n      maxHeight: PropTypes.number,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      _validateMaxHeight: function (_a, _, componentName) {\n        var _b = _a.maxHeight,\n            maxHeight = _b === void 0 ? 1 : _b;\n\n        if (maxHeight < 0) {\n          return new Error(\"The maxHeight prop for `\" + componentName + \"` must be a number greater \" + (\"than 0, but received `\" + maxHeight + \"`.\"));\n        }\n\n        return null;\n      }\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../src/VerticalDivider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, useCallback, useState, } from \"react\";\nimport { applyRef } from \"@react-md/utils\";\nimport { Divider } from \"./Divider\";\n/**\n * This is a small hook that is used to automatically create a vertical divider\n * based on the computed height of its parent element.\n *\n * @param maxHeight - The max height for the vertical divider. When the value is\n * between 0 and 1, it will be used as a percentage. Otherwise the smaller value\n * of parent element height and this will be used.\n */\nexport function useVerticalDividerHeight(maxHeight, forwardedRef) {\n    if (process.env.NODE_ENV !== \"production\" && maxHeight < 0) {\n        throw new Error(\"The `maxHeight` for a vertical divider height must be greater than 0\");\n    }\n    var _a = useState(undefined), height = _a[0], setHeight = _a[1];\n    var ref = useCallback(function (instance) {\n        applyRef(instance, forwardedRef);\n        if (!instance || !instance.parentElement) {\n            return;\n        }\n        var height = instance.parentElement.offsetHeight;\n        if (maxHeight <= 1) {\n            setHeight(height * maxHeight);\n        }\n        else {\n            setHeight(Math.min(height, maxHeight));\n        }\n    }, [maxHeight, forwardedRef]);\n    return { ref: ref, height: height };\n}\n/**\n * This component is used to create a vertical divider based on a parent\n * element's height. This is really only needed when the parent element **has no\n * defined height**.  If there is a defined height, this component is not worth\n * much as the height can be computed in css as normal. This really just fixes\n * the issue that the height would be set to `auto` (which computes to 0 most of\n * the time) when it is not set on a parent element.\n */\nexport var VerticalDivider = forwardRef(function VerticalDivider(_a, forwardedRef) {\n    var style = _a.style, _b = _a.maxHeight, maxHeight = _b === void 0 ? 1 : _b, props = __rest(_a, [\"style\", \"maxHeight\"]);\n    var _c = useVerticalDividerHeight(maxHeight, forwardedRef), ref = _c.ref, height = _c.height;\n    return (React.createElement(Divider, __assign({}, props, { style: __assign(__assign({}, style), { height: height }), ref: ref, vertical: true })));\n});\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        VerticalDivider.propTypes = {\n            style: PropTypes.object,\n            maxHeight: PropTypes.number,\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error\n            _validateMaxHeight: function (_a, _, componentName) {\n                var _b = _a.maxHeight, maxHeight = _b === void 0 ? 1 : _b;\n                if (maxHeight < 0) {\n                    return new Error(\"The maxHeight prop for `\" + componentName + \"` must be a number greater \" +\n                        (\"than 0, but received `\" + maxHeight + \"`.\"));\n                }\n                return null;\n            },\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=VerticalDivider.js.map"]},"metadata":{},"sourceType":"module"}