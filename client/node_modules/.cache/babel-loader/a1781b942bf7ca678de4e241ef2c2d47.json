{"ast":null,"code":"import React, { createContext, useContext, useMemo } from \"react\";\nvar context = createContext({\n  theme: \"outline\",\n  underlineDirection: \"left\"\n});\n/**\n * Gets the current theme values for a form component by inheriting the current\n * form theme via context. If you provide an object of theme props, the returned\n * value will use any defined values from the theme props and fallback to the\n * context value.\n *\n * Example:\n * ```ts\n * // everything is inherited\n * const formTheme = useFormTheme();\n *\n * // theme will be set to \"underline\" while the others will be inherited\n * const formTheme = useFormTheme({ theme: \"underline\" });\n * ```\n */\n\nexport function useFormTheme(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var formTheme = useContext(context);\n  var theme = options.theme,\n      underlineDirection = options.underlineDirection;\n  theme = theme !== null && theme !== void 0 ? theme : formTheme.theme;\n  underlineDirection = underlineDirection !== null && underlineDirection !== void 0 ? underlineDirection : formTheme.underlineDirection;\n  return {\n    theme: theme,\n    underlineDirection: underlineDirection\n  };\n}\nvar Provider = context.Provider;\n/**\n * Since you'll normally want all of your form components to use the same theme,\n * this is a simple way to provide the same theme to all components without\n * needing all the prop-drilling/copying.\n */\n\nexport function FormThemeProvider(_a) {\n  var _b = _a.theme,\n      theme = _b === void 0 ? \"outline\" : _b,\n      _c = _a.underlineDirection,\n      underlineDirection = _c === void 0 ? \"left\" : _c,\n      children = _a.children;\n  var value = useMemo(function () {\n    return {\n      theme: theme,\n      underlineDirection: underlineDirection\n    };\n  }, [theme, underlineDirection]);\n  return React.createElement(Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"sources":["../src/FormThemeProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IACE,aADF,EAIE,UAJF,EAKE,OALF,QAMO,OANP;AA4CA,IAAM,OAAO,GAAG,aAAa,CAAmB;AAC9C,EAAA,KAAK,EAAE,SADuC;AAE9C,EAAA,kBAAkB,EAAE;AAF0B,CAAnB,CAA7B;AAKA;;;;;;;;;;;;;;AAcG;;AACH,OAAM,SAAU,YAAV,CAAuB,OAAvB,EAAqD;AAA9B,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA8B;;AACzD,MAAM,SAAS,GAAG,UAAU,CAAC,OAAD,CAA5B;AACM,MAAA,KAAK,GAAyB,OAAO,CAAhC,KAAL;AAAA,MAAO,kBAAkB,GAAK,OAAO,CAAZ,kBAAzB;AACN,EAAA,KAAK,GAAG,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,SAAS,CAAC,KAA3B;AACA,EAAA,kBAAkB,GAAG,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAA,kBAAA,GAAsB,SAAS,CAAC,kBAArD;AAEA,SAAO;AACL,IAAA,KAAK,EAAA,KADA;AAEL,IAAA,kBAAkB,EAAA;AAFb,GAAP;AAID;AAEO,IAAA,QAAQ,GAAK,OAAO,CAAZ,QAAR;AAMR;;;;AAIG;;AACH,OAAM,SAAU,iBAAV,CAA4B,EAA5B,EAImB;MAHvB,EAAA,GAAA,EAAA,CAAA,K;MAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAH,GAAY,E;MACjB,EAAA,GAAA,EAAA,CAAA,kB;MAAA,kBAAkB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,MAAH,GAAS,E;MAC3B,QAAQ,GAAA,EAAA,CAAA,Q;AAER,MAAM,KAAK,GAAG,OAAO,CAAC,YAAA;AAAM,WAAC;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,kBAAkB,EAA5B;AAAC,KAAD;AAA+B,GAAtC,EAAwC,CAC3D,KAD2D,EAE3D,kBAF2D,CAAxC,CAArB;AAKA,SAAO,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,IAAA,KAAK,EAAE;AAAR,GAAT,EAAyB,QAAzB,CAAP;AACD","sourceRoot":"","sourcesContent":["import React, { createContext, useContext, useMemo, } from \"react\";\nvar context = createContext({\n    theme: \"outline\",\n    underlineDirection: \"left\",\n});\n/**\n * Gets the current theme values for a form component by inheriting the current\n * form theme via context. If you provide an object of theme props, the returned\n * value will use any defined values from the theme props and fallback to the\n * context value.\n *\n * Example:\n * ```ts\n * // everything is inherited\n * const formTheme = useFormTheme();\n *\n * // theme will be set to \"underline\" while the others will be inherited\n * const formTheme = useFormTheme({ theme: \"underline\" });\n * ```\n */\nexport function useFormTheme(options) {\n    if (options === void 0) { options = {}; }\n    var formTheme = useContext(context);\n    var theme = options.theme, underlineDirection = options.underlineDirection;\n    theme = theme !== null && theme !== void 0 ? theme : formTheme.theme;\n    underlineDirection = underlineDirection !== null && underlineDirection !== void 0 ? underlineDirection : formTheme.underlineDirection;\n    return {\n        theme: theme,\n        underlineDirection: underlineDirection,\n    };\n}\nvar Provider = context.Provider;\n/**\n * Since you'll normally want all of your form components to use the same theme,\n * this is a simple way to provide the same theme to all components without\n * needing all the prop-drilling/copying.\n */\nexport function FormThemeProvider(_a) {\n    var _b = _a.theme, theme = _b === void 0 ? \"outline\" : _b, _c = _a.underlineDirection, underlineDirection = _c === void 0 ? \"left\" : _c, children = _a.children;\n    var value = useMemo(function () { return ({ theme: theme, underlineDirection: underlineDirection }); }, [\n        theme,\n        underlineDirection,\n    ]);\n    return React.createElement(Provider, { value: value }, children);\n}\n//# sourceMappingURL=FormThemeProvider.js.map"]},"metadata":{},"sourceType":"module"}