{"ast":null,"code":"import { useCallback, useState } from \"react\";\n/**\n * A small hook that can be used for controlling the state of a single Checkbox\n * component.\n *\n * @param defaultChecked - Boolean if the input should be checked by default.\n * Changing this value will not update the state after initial render.\n * @param onChange - An optional change event handler to also call when the\n * checked state changes.\n * @returns a list containing the checked state, a change event handler, and\n * then a manual set checked action.\n */\n\nexport function useChecked(defaultChecked, onChange) {\n  var _a = useState(defaultChecked),\n      checked = _a[0],\n      setChecked = _a[1];\n\n  var handleChange = useCallback(function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n\n    setChecked(event.currentTarget.checked);\n  }, [onChange]);\n  return [checked, handleChange, setChecked];\n}","map":{"version":3,"sources":["../../src/toggle/useChecked.ts"],"names":[],"mappings":"AAAA,SAAmC,WAAnC,EAAgD,QAAhD,QAAgE,OAAhE;AAKA;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,UAAV,CACJ,cADI,EAEJ,QAFI,EAEyB;AAEvB,MAAA,EAAA,GAAwB,QAAQ,CAAC,cAAD,CAAhC;AAAA,MAAC,OAAO,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,MAAU,UAAU,GAAA,EAAA,CAAA,CAAA,CAApB;;AAEN,MAAM,YAAY,GAAG,WAAW,CAC9B,UAAC,KAAD,EAAM;AACJ,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,KAAD,CAAR;AACD;;AAED,IAAA,UAAU,CAAC,KAAK,CAAC,aAAN,CAAoB,OAArB,CAAV;AACD,GAP6B,EAQ9B,CAAC,QAAD,CAR8B,CAAhC;AAWA,SAAO,CAAC,OAAD,EAAU,YAAV,EAAwB,UAAxB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useState } from \"react\";\n/**\n * A small hook that can be used for controlling the state of a single Checkbox\n * component.\n *\n * @param defaultChecked - Boolean if the input should be checked by default.\n * Changing this value will not update the state after initial render.\n * @param onChange - An optional change event handler to also call when the\n * checked state changes.\n * @returns a list containing the checked state, a change event handler, and\n * then a manual set checked action.\n */\nexport function useChecked(defaultChecked, onChange) {\n    var _a = useState(defaultChecked), checked = _a[0], setChecked = _a[1];\n    var handleChange = useCallback(function (event) {\n        if (onChange) {\n            onChange(event);\n        }\n        setChecked(event.currentTarget.checked);\n    }, [onChange]);\n    return [checked, handleChange, setChecked];\n}\n//# sourceMappingURL=useChecked.js.map"]},"metadata":{},"sourceType":"module"}