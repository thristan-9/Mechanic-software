{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-toggle-container\");\n/**\n * The `ToggleContainer` component should generally be used around a\n * custom `\"checkbox\"`, `\"radio\"`, or `\"switch\"` component to help with\n * additional styles. This is mostly an internal component so I'm not\n * sure useful it will be though.\n */\n\nexport var ToggleContainer = forwardRef(function ToggleContainer(_a, ref) {\n  var className = _a.className,\n      _b = _a.inline,\n      inline = _b === void 0 ? false : _b,\n      _c = _a.stacked,\n      stacked = _c === void 0 ? false : _c,\n      children = _a.children,\n      props = __rest(_a, [\"className\", \"inline\", \"stacked\", \"children\"]);\n\n  return React.createElement(\"div\", __assign({}, props, {\n    ref: ref,\n    className: cn(block({\n      stacked: stacked,\n      inline: inline\n    }), className)\n  }), children);\n});\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    ToggleContainer.propTypes = {\n      inline: PropTypes.bool,\n      stacked: PropTypes.bool,\n      className: PropTypes.string,\n      children: PropTypes.node\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../../src/toggle/ToggleContainer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAkD,OAAlD;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,GAAT,QAAoB,iBAApB;AAgBA,IAAM,KAAK,GAAG,GAAG,CAAC,sBAAD,CAAjB;AAEA;;;;;AAKG;;AACH,OAAO,IAAM,eAAe,GAAG,UAAU,CACvC,SAAS,eAAT,CACE,EADF,EAEE,GAFF,EAEK;AADD,MAAA,SAAS,GAAA,EAAA,CAAA,SAAT;AAAA,MAAW,EAAA,GAAA,EAAA,CAAA,MAAX;AAAA,MAAW,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAAzB;AAAA,MAA2B,EAAA,GAAA,EAAA,CAAA,OAA3B;AAAA,MAA2B,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAA1C;AAAA,MAA4C,QAAQ,GAAA,EAAA,CAAA,QAApD;AAAA,MAAyD,KAAK,GAAA,MAAA,CAAA,EAAA,EAAhE,CAAA,WAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,CAAgE,CAA9D;;AAGF,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,GAAG,EAAE,GADI;AAET,IAAA,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC;AAAE,MAAA,OAAO,EAAA,OAAT;AAAW,MAAA,MAAM,EAAA;AAAjB,KAAD,CAAN,EAA6B,SAA7B;AAFJ,GADX,CAAA,EAKG,QALH,CADF;AASD,CAdsC,CAAlC;AAiBP;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,eAAe,CAAC,SAAhB,GAA4B;AAC1B,MAAA,MAAM,EAAE,SAAS,CAAC,IADQ;AAE1B,MAAA,OAAO,EAAE,SAAS,CAAC,IAFO;AAG1B,MAAA,SAAS,EAAE,SAAS,CAAC,MAHK;AAI1B,MAAA,QAAQ,EAAE,SAAS,CAAC;AAJM,KAA5B;AAMD,GATD,CASE,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-toggle-container\");\n/**\n * The `ToggleContainer` component should generally be used around a\n * custom `\"checkbox\"`, `\"radio\"`, or `\"switch\"` component to help with\n * additional styles. This is mostly an internal component so I'm not\n * sure useful it will be though.\n */\nexport var ToggleContainer = forwardRef(function ToggleContainer(_a, ref) {\n    var className = _a.className, _b = _a.inline, inline = _b === void 0 ? false : _b, _c = _a.stacked, stacked = _c === void 0 ? false : _c, children = _a.children, props = __rest(_a, [\"className\", \"inline\", \"stacked\", \"children\"]);\n    return (React.createElement(\"div\", __assign({}, props, { ref: ref, className: cn(block({ stacked: stacked, inline: inline }), className) }), children));\n});\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        ToggleContainer.propTypes = {\n            inline: PropTypes.bool,\n            stacked: PropTypes.bool,\n            className: PropTypes.string,\n            children: PropTypes.node,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=ToggleContainer.js.map"]},"metadata":{},"sourceType":"module"}