{"ast":null,"code":"import { useMemo, useState } from \"react\";\nimport cn from \"classnames\";\nimport { COLLAPSE_TIMEOUT, DEFAULT_COLLAPSE_MIN_HEIGHT, DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM, DEFAULT_COLLAPSE_MIN_PADDING_TOP, ENTER, ENTERING, EXIT, EXITED, EXITING } from \"./constants\";\nimport { getElementSizing } from \"./getElementSizing\";\nimport { getTimeout } from \"./getTimeout\";\nimport { useTransition } from \"./useTransition\";\n/**\n * The `useCollapse` hook is used to transition a child element in and\n * out of view by animating it's `max-height`. This means that the child\n * must either be an HTMLElement or a component that forwards the `ref`\n * to an HTMLElement and applies the `style`, `className`, and `hidden`\n * props to an HTMLElement.\n *\n * Simple Example:\n *\n * ```tsx\n * const Example = () => {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const [rendered, transitionProps] = useCollapse(collapsed);\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>Toggle</Button>\n *       {rendered && (\n *         <div {...transitionProps}>\n *          <Text>Stuff that should be animated</Text>\n *          <div>Whatever content...</div>\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * Note: This **should not be used for `position: absolute` or `position: fixed`\n * elements**. Instead, the `ScaleTransition` or just a simple `transform`\n * transition should be used instead. Animating `max-height`, `padding-top`, and\n * `padding-bottom` is much less performant than `transform` transition since it\n * forces the DOM to repaint during the\n *\n * @param collapsed - Boolean if the element is currently collapsed. Changing\n * this value will cause the animation to trigger.\n * @param options - All the additional options available for the collapse\n * transition.\n * @returns An ordered list containing a boolean if the collapse should be\n * rendered in the DOM followed by an object of props to pass to the collapsible\n * element to handle the transition.\n */\n\nexport function useCollapse(collapsed, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      className = _b.className,\n      _c = _b.appear,\n      appear = _c === void 0 ? false : _c,\n      _d = _b.timeout,\n      timeout = _d === void 0 ? COLLAPSE_TIMEOUT : _d,\n      onEnter = _b.onEnter,\n      onEntering = _b.onEntering,\n      onEntered = _b.onEntered,\n      onExit = _b.onExit,\n      onExiting = _b.onExiting,\n      onExited = _b.onExited,\n      _e = _b.minHeight,\n      minHeight = _e === void 0 ? DEFAULT_COLLAPSE_MIN_HEIGHT : _e,\n      _f = _b.minPaddingTop,\n      minPaddingTop = _f === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_TOP : _f,\n      _g = _b.minPaddingBottom,\n      minPaddingBottom = _g === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM : _g,\n      _h = _b.temporary,\n      temporary = _h === void 0 ? minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0 : _h;\n\n  var _j = useState(function () {\n    if (!collapsed) {\n      return undefined;\n    }\n\n    return {\n      maxHeight: minHeight,\n      paddingTop: minPaddingTop,\n      paddingBottom: minPaddingBottom\n    };\n  }),\n      style = _j[0],\n      setStyle = _j[1];\n\n  var _k = useTransition({\n    appear: appear,\n    repaint: true,\n    timeout: timeout,\n    temporary: temporary,\n    transitionIn: !collapsed,\n    onEnter: function (node, isAppearing) {\n      if (onEnter) {\n        onEnter(node, isAppearing);\n      }\n\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom\n      });\n    },\n    onEntering: function (node, isAppearing) {\n      if (onEntering) {\n        onEntering(node, isAppearing);\n      }\n\n      var _a = getElementSizing(node),\n          maxHeight = _a.maxHeight,\n          paddingTop = _a.paddingTop,\n          paddingBottom = _a.paddingBottom;\n\n      var defaultedTimeout = getTimeout(timeout, isAppearing);\n      var duration = isAppearing ? defaultedTimeout.appear : defaultedTimeout.enter;\n      setStyle({\n        maxHeight: maxHeight,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        transitionDuration: duration + \"ms\"\n      });\n    },\n    onEntered: function (node, isAppearing) {\n      if (onEntered) {\n        onEntered(node, isAppearing);\n      }\n\n      setStyle(undefined);\n    },\n    onExit: function (node) {\n      if (onExit) {\n        onExit(node);\n      }\n\n      var _a = getElementSizing(node),\n          maxHeight = _a.maxHeight,\n          paddingTop = _a.paddingTop,\n          paddingBottom = _a.paddingBottom;\n\n      setStyle({\n        maxHeight: maxHeight,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        transitionDuration: getTimeout(timeout, false).exit + \"ms\"\n      });\n    },\n    onExiting: function (node) {\n      if (onExiting) {\n        onExiting(node);\n      }\n\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n        transitionDuration: getTimeout(timeout, false).exit + \"ms\"\n      });\n    },\n    onExited: function (node) {\n      if (onExited) {\n        onExited(node);\n      }\n\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom\n      });\n    }\n  }),\n      rendered = _k.rendered,\n      stage = _k.stage,\n      ref = _k.ref;\n\n  var entering = stage === ENTER || stage === ENTERING;\n  var exiting = stage === EXIT || stage === EXITING;\n  var collapsable = useMemo(function () {\n    return Object.values(getTimeout(timeout, false)).some(function (v) {\n      return v !== 0;\n    });\n  }, [timeout]);\n  var hidden = collapsed && rendered && stage === EXITED && !temporary && minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0;\n  return [rendered, {\n    ref: ref,\n    hidden: hidden,\n    style: style,\n    className: cn({\n      \"rmd-collapse\": collapsable,\n      \"rmd-collapse--enter\": entering,\n      \"rmd-collapse--leave\": exiting,\n      \"rmd-collapse--no-overflow\": collapsed || style\n    }, className)\n  }];\n}","map":{"version":3,"sources":["../src/useCollapse.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useMemo, useState } from \"react\";\nimport cn from \"classnames\";\nimport { COLLAPSE_TIMEOUT, DEFAULT_COLLAPSE_MIN_HEIGHT, DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM, DEFAULT_COLLAPSE_MIN_PADDING_TOP, ENTER, ENTERING, EXIT, EXITED, EXITING, } from \"./constants\";\nimport { getElementSizing } from \"./getElementSizing\";\nimport { getTimeout } from \"./getTimeout\";\nimport { useTransition } from \"./useTransition\";\n/**\n * The `useCollapse` hook is used to transition a child element in and\n * out of view by animating it's `max-height`. This means that the child\n * must either be an HTMLElement or a component that forwards the `ref`\n * to an HTMLElement and applies the `style`, `className`, and `hidden`\n * props to an HTMLElement.\n *\n * Simple Example:\n *\n * ```tsx\n * const Example = () => {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const [rendered, transitionProps] = useCollapse(collapsed);\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>Toggle</Button>\n *       {rendered && (\n *         <div {...transitionProps}>\n *          <Text>Stuff that should be animated</Text>\n *          <div>Whatever content...</div>\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * Note: This **should not be used for `position: absolute` or `position: fixed`\n * elements**. Instead, the `ScaleTransition` or just a simple `transform`\n * transition should be used instead. Animating `max-height`, `padding-top`, and\n * `padding-bottom` is much less performant than `transform` transition since it\n * forces the DOM to repaint during the\n *\n * @param collapsed - Boolean if the element is currently collapsed. Changing\n * this value will cause the animation to trigger.\n * @param options - All the additional options available for the collapse\n * transition.\n * @returns An ordered list containing a boolean if the collapse should be\n * rendered in the DOM followed by an object of props to pass to the collapsible\n * element to handle the transition.\n */\nexport function useCollapse(collapsed, _a) {\n    var _b = _a === void 0 ? {} : _a, className = _b.className, _c = _b.appear, appear = _c === void 0 ? false : _c, _d = _b.timeout, timeout = _d === void 0 ? COLLAPSE_TIMEOUT : _d, onEnter = _b.onEnter, onEntering = _b.onEntering, onEntered = _b.onEntered, onExit = _b.onExit, onExiting = _b.onExiting, onExited = _b.onExited, _e = _b.minHeight, minHeight = _e === void 0 ? DEFAULT_COLLAPSE_MIN_HEIGHT : _e, _f = _b.minPaddingTop, minPaddingTop = _f === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_TOP : _f, _g = _b.minPaddingBottom, minPaddingBottom = _g === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM : _g, _h = _b.temporary, temporary = _h === void 0 ? minHeight === 0 &&\n        minPaddingTop === 0 &&\n        minPaddingBottom === 0 : _h;\n    var _j = useState(function () {\n        if (!collapsed) {\n            return undefined;\n        }\n        return {\n            maxHeight: minHeight,\n            paddingTop: minPaddingTop,\n            paddingBottom: minPaddingBottom,\n        };\n    }), style = _j[0], setStyle = _j[1];\n    var _k = useTransition({\n        appear: appear,\n        repaint: true,\n        timeout: timeout,\n        temporary: temporary,\n        transitionIn: !collapsed,\n        onEnter: function (node, isAppearing) {\n            if (onEnter) {\n                onEnter(node, isAppearing);\n            }\n            setStyle({\n                maxHeight: minHeight,\n                paddingTop: minPaddingTop,\n                paddingBottom: minPaddingBottom,\n            });\n        },\n        onEntering: function (node, isAppearing) {\n            if (onEntering) {\n                onEntering(node, isAppearing);\n            }\n            var _a = getElementSizing(node), maxHeight = _a.maxHeight, paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom;\n            var defaultedTimeout = getTimeout(timeout, isAppearing);\n            var duration = isAppearing\n                ? defaultedTimeout.appear\n                : defaultedTimeout.enter;\n            setStyle({\n                maxHeight: maxHeight,\n                paddingTop: paddingTop,\n                paddingBottom: paddingBottom,\n                transitionDuration: duration + \"ms\",\n            });\n        },\n        onEntered: function (node, isAppearing) {\n            if (onEntered) {\n                onEntered(node, isAppearing);\n            }\n            setStyle(undefined);\n        },\n        onExit: function (node) {\n            if (onExit) {\n                onExit(node);\n            }\n            var _a = getElementSizing(node), maxHeight = _a.maxHeight, paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom;\n            setStyle({\n                maxHeight: maxHeight,\n                paddingTop: paddingTop,\n                paddingBottom: paddingBottom,\n                transitionDuration: getTimeout(timeout, false).exit + \"ms\",\n            });\n        },\n        onExiting: function (node) {\n            if (onExiting) {\n                onExiting(node);\n            }\n            setStyle({\n                maxHeight: minHeight,\n                paddingTop: minPaddingTop,\n                paddingBottom: minPaddingBottom,\n                transitionDuration: getTimeout(timeout, false).exit + \"ms\",\n            });\n        },\n        onExited: function (node) {\n            if (onExited) {\n                onExited(node);\n            }\n            setStyle({\n                maxHeight: minHeight,\n                paddingTop: minPaddingTop,\n                paddingBottom: minPaddingBottom,\n            });\n        },\n    }), rendered = _k.rendered, stage = _k.stage, ref = _k.ref;\n    var entering = stage === ENTER || stage === ENTERING;\n    var exiting = stage === EXIT || stage === EXITING;\n    var collapsable = useMemo(function () { return Object.values(getTimeout(timeout, false)).some(function (v) { return v !== 0; }); }, [timeout]);\n    var hidden = collapsed &&\n        rendered &&\n        stage === EXITED &&\n        !temporary &&\n        minHeight === 0 &&\n        minPaddingTop === 0 &&\n        minPaddingBottom === 0;\n    return [\n        rendered,\n        {\n            ref: ref,\n            hidden: hidden,\n            style: style,\n            className: cn({\n                \"rmd-collapse\": collapsable,\n                \"rmd-collapse--enter\": entering,\n                \"rmd-collapse--leave\": exiting,\n                \"rmd-collapse--no-overflow\": collapsed || style,\n            }, className),\n        },\n    ];\n}\n//# sourceMappingURL=useCollapse.js.map"]},"metadata":{},"sourceType":"module"}