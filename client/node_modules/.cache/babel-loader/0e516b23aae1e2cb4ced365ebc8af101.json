{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-fieldset\");\n/**\n * This is a simple wrapper for the `<fieldset>` that defaults to removing\n * the default styles of a border, padding, and margin and having a screen-reader\n * visible only legend element for added accessibility.\n */\n\nexport var Fieldset = forwardRef(function Fieldset(_a, ref) {\n  var className = _a.className,\n      legend = _a.legend,\n      legendStyle = _a.legendStyle,\n      legendClassName = _a.legendClassName,\n      _b = _a.legendSROnly,\n      legendSROnly = _b === void 0 ? false : _b,\n      _c = _a.unstyled,\n      unstyled = _c === void 0 ? true : _c,\n      children = _a.children,\n      props = __rest(_a, [\"className\", \"legend\", \"legendStyle\", \"legendClassName\", \"legendSROnly\", \"unstyled\", \"children\"]);\n\n  return React.createElement(\"fieldset\", __assign({}, props, {\n    ref: ref,\n    className: cn(block({\n      unstyled: unstyled\n    }), className)\n  }), React.createElement(\"legend\", {\n    style: legendStyle,\n    className: cn(block(\"legend\", {\n      \"sr-only\": legendSROnly\n    }), legendClassName)\n  }, legend), children);\n});\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    Fieldset.propTypes = {\n      className: PropTypes.string,\n      unstyled: PropTypes.bool,\n      legend: PropTypes.node.isRequired,\n      legendStyle: PropTypes.object,\n      legendClassName: PropTypes.string,\n      legendSROnly: PropTypes.bool,\n      children: PropTypes.node\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../src/Fieldset.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAGE,UAHF,QAKO,OALP;AAMA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,GAAT,QAAoB,iBAApB;AAiCA,IAAM,KAAK,GAAG,GAAG,CAAC,cAAD,CAAjB;AAEA;;;;AAIG;;AACH,OAAO,IAAM,QAAQ,GAAG,UAAU,CAChC,SAAS,QAAT,CACE,EADF,EAWE,GAXF,EAWK;AATD,MAAA,SAAS,GAAA,EAAA,CAAA,SAAT;AAAA,MACA,MAAM,GAAA,EAAA,CAAA,MADN;AAAA,MAEA,WAAW,GAAA,EAAA,CAAA,WAFX;AAAA,MAGA,eAAe,GAAA,EAAA,CAAA,eAHf;AAAA,MAIA,EAAA,GAAA,EAAA,CAAA,YAJA;AAAA,MAIA,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAJpB;AAAA,MAKA,EAAA,GAAA,EAAA,CAAA,QALA;AAAA,MAKA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EALf;AAAA,MAMA,QAAQ,GAAA,EAAA,CAAA,QANR;AAAA,MAOG,KAAK,GAAA,MAAA,CAAA,EAAA,EARV,CAAA,WAAA,EAAA,QAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,UAAA,EAAA,UAAA,CAQU,CAPR;;AAWF,SACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,GAAG,EAAE,GADI;AAET,IAAA,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC;AAAE,MAAA,QAAQ,EAAA;AAAV,KAAD,CAAN,EAAsB,SAAtB;AAFJ,GADX,CAAA,EAKE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,EAAE,WADT;AAEE,IAAA,SAAS,EAAE,EAAE,CACX,KAAK,CAAC,QAAD,EAAW;AAAE,iBAAW;AAAb,KAAX,CADM,EAEX,eAFW;AAFf,GAAA,EAOG,MAPH,CALF,EAcG,QAdH,CADF;AAkBD,CAhC+B,CAA3B;AAmCP;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,QAAQ,CAAC,SAAT,GAAqB;AACnB,MAAA,SAAS,EAAE,SAAS,CAAC,MADF;AAEnB,MAAA,QAAQ,EAAE,SAAS,CAAC,IAFD;AAGnB,MAAA,MAAM,EAAE,SAAS,CAAC,IAAV,CAAe,UAHJ;AAInB,MAAA,WAAW,EAAE,SAAS,CAAC,MAJJ;AAKnB,MAAA,eAAe,EAAE,SAAS,CAAC,MALR;AAMnB,MAAA,YAAY,EAAE,SAAS,CAAC,IANL;AAOnB,MAAA,QAAQ,EAAE,SAAS,CAAC;AAPD,KAArB;AASD,GAZD,CAYE,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-fieldset\");\n/**\n * This is a simple wrapper for the `<fieldset>` that defaults to removing\n * the default styles of a border, padding, and margin and having a screen-reader\n * visible only legend element for added accessibility.\n */\nexport var Fieldset = forwardRef(function Fieldset(_a, ref) {\n    var className = _a.className, legend = _a.legend, legendStyle = _a.legendStyle, legendClassName = _a.legendClassName, _b = _a.legendSROnly, legendSROnly = _b === void 0 ? false : _b, _c = _a.unstyled, unstyled = _c === void 0 ? true : _c, children = _a.children, props = __rest(_a, [\"className\", \"legend\", \"legendStyle\", \"legendClassName\", \"legendSROnly\", \"unstyled\", \"children\"]);\n    return (React.createElement(\"fieldset\", __assign({}, props, { ref: ref, className: cn(block({ unstyled: unstyled }), className) }),\n        React.createElement(\"legend\", { style: legendStyle, className: cn(block(\"legend\", { \"sr-only\": legendSROnly }), legendClassName) }, legend),\n        children));\n});\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        Fieldset.propTypes = {\n            className: PropTypes.string,\n            unstyled: PropTypes.bool,\n            legend: PropTypes.node.isRequired,\n            legendStyle: PropTypes.object,\n            legendClassName: PropTypes.string,\n            legendSROnly: PropTypes.bool,\n            children: PropTypes.node,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=Fieldset.js.map"]},"metadata":{},"sourceType":"module"}