{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useFormTheme } from \"./FormThemeProvider\";\nvar block = bem(\"rmd-form-message\");\n/**\n * The `FormMessage` component is used to create additional helper messages or\n * error messages and generally placed below the related `TextField`. If a\n * `length` (of the `value`) and `maxLength` are provided, a counter will also\n * be displayed to the right of the `children`.\n *\n * This component can also be used to create form-level validation messages by\n * setting the `role` prop to `\"alert\"`.\n */\n\nexport var FormMessage = forwardRef(function FormMessage(_a, ref) {\n  var _b;\n\n  var id = _a.id,\n      role = _a.role,\n      className = _a.className,\n      counterStyle = _a.counterStyle,\n      counterClassName = _a.counterClassName,\n      messageStyle = _a.messageStyle,\n      messageClassName = _a.messageClassName,\n      _c = _a.error,\n      error = _c === void 0 ? false : _c,\n      _d = _a.disableWrap,\n      disableWrap = _d === void 0 ? false : _d,\n      propTheme = _a.theme,\n      children = _a.children,\n      length = _a.length,\n      maxLength = _a.maxLength,\n      props = __rest(_a, [\"id\", \"role\", \"className\", \"counterStyle\", \"counterClassName\", \"messageStyle\", \"messageClassName\", \"error\", \"disableWrap\", \"theme\", \"children\", \"length\", \"maxLength\"]);\n\n  var theme = useFormTheme({\n    theme: propTheme\n  }).theme;\n  var message = children;\n\n  if (!disableWrap && children) {\n    message = React.createElement(\"p\", {\n      id: id + \"-message\",\n      style: messageStyle,\n      className: cn(block(\"message\"), messageClassName)\n    }, children);\n  }\n\n  return React.createElement(\"div\", __assign({}, props, {\n    id: id,\n    ref: ref,\n    \"aria-live\": role !== \"alert\" ? \"polite\" : undefined,\n    role: role,\n    className: cn(block((_b = {\n      error: error\n    }, _b[theme] = theme !== \"none\", _b)), className)\n  }), message, typeof length === \"number\" && typeof maxLength === \"number\" && React.createElement(\"span\", {\n    id: id + \"-counter\",\n    style: counterStyle,\n    className: cn(block(\"counter\"), counterClassName)\n  }, length + \" / \" + maxLength));\n});\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    FormMessage.propTypes = {\n      id: PropTypes.string.isRequired,\n      role: PropTypes.oneOf([\"alert\"]),\n      className: PropTypes.string,\n      messageStyle: PropTypes.object,\n      messageClassName: PropTypes.string,\n      counterStyle: PropTypes.object,\n      counterClassName: PropTypes.string,\n      error: PropTypes.bool,\n      length: PropTypes.number,\n      maxLength: PropTypes.number,\n      disableWrap: PropTypes.bool,\n      children: PropTypes.node,\n      theme: PropTypes.oneOf([\"none\", \"underline\", \"filled\", \"outline\"]),\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      _counterValidator: function (props, _propName, component) {\n        var length = props.length,\n            maxLength = props.maxLength;\n        var lengthType = typeof length;\n        var maxLengthType = typeof maxLength;\n\n        if (lengthType === maxLengthType) {\n          return null;\n        }\n\n        return new Error(\"Both the `length` and `maxLength` props are required to be defined \" + (\"and a number to create a counter in the `\" + component + \"` component, but \") + (\"received `length: \" + length + \"` and `maxLength: \" + maxLength + \"`\"));\n      }\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../src/FormMessage.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useFormTheme } from \"./FormThemeProvider\";\nvar block = bem(\"rmd-form-message\");\n/**\n * The `FormMessage` component is used to create additional helper messages or\n * error messages and generally placed below the related `TextField`. If a\n * `length` (of the `value`) and `maxLength` are provided, a counter will also\n * be displayed to the right of the `children`.\n *\n * This component can also be used to create form-level validation messages by\n * setting the `role` prop to `\"alert\"`.\n */\nexport var FormMessage = forwardRef(function FormMessage(_a, ref) {\n    var _b;\n    var id = _a.id, role = _a.role, className = _a.className, counterStyle = _a.counterStyle, counterClassName = _a.counterClassName, messageStyle = _a.messageStyle, messageClassName = _a.messageClassName, _c = _a.error, error = _c === void 0 ? false : _c, _d = _a.disableWrap, disableWrap = _d === void 0 ? false : _d, propTheme = _a.theme, children = _a.children, length = _a.length, maxLength = _a.maxLength, props = __rest(_a, [\"id\", \"role\", \"className\", \"counterStyle\", \"counterClassName\", \"messageStyle\", \"messageClassName\", \"error\", \"disableWrap\", \"theme\", \"children\", \"length\", \"maxLength\"]);\n    var theme = useFormTheme({ theme: propTheme }).theme;\n    var message = children;\n    if (!disableWrap && children) {\n        message = (React.createElement(\"p\", { id: id + \"-message\", style: messageStyle, className: cn(block(\"message\"), messageClassName) }, children));\n    }\n    return (React.createElement(\"div\", __assign({}, props, { id: id, ref: ref, \"aria-live\": role !== \"alert\" ? \"polite\" : undefined, role: role, className: cn(block((_b = {\n                error: error\n            },\n            _b[theme] = theme !== \"none\",\n            _b)), className) }),\n        message,\n        typeof length === \"number\" && typeof maxLength === \"number\" && (React.createElement(\"span\", { id: id + \"-counter\", style: counterStyle, className: cn(block(\"counter\"), counterClassName) }, length + \" / \" + maxLength))));\n});\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        FormMessage.propTypes = {\n            id: PropTypes.string.isRequired,\n            role: PropTypes.oneOf([\"alert\"]),\n            className: PropTypes.string,\n            messageStyle: PropTypes.object,\n            messageClassName: PropTypes.string,\n            counterStyle: PropTypes.object,\n            counterClassName: PropTypes.string,\n            error: PropTypes.bool,\n            length: PropTypes.number,\n            maxLength: PropTypes.number,\n            disableWrap: PropTypes.bool,\n            children: PropTypes.node,\n            theme: PropTypes.oneOf([\"none\", \"underline\", \"filled\", \"outline\"]),\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error\n            _counterValidator: function (props, _propName, component) {\n                var length = props.length, maxLength = props.maxLength;\n                var lengthType = typeof length;\n                var maxLengthType = typeof maxLength;\n                if (lengthType === maxLengthType) {\n                    return null;\n                }\n                return new Error(\"Both the `length` and `maxLength` props are required to be defined \" +\n                    (\"and a number to create a counter in the `\" + component + \"` component, but \") +\n                    (\"received `length: \" + length + \"` and `maxLength: \" + maxLength + \"`\"));\n            },\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=FormMessage.js.map"]},"metadata":{},"sourceType":"module"}