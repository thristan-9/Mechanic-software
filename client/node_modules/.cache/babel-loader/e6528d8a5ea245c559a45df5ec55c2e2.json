{"ast":null,"code":"import { getPercentage, nearest } from \"@react-md/utils\";\n/**\n * Gets the number of steps in the allowed range of values.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\n\nexport var getSteps = function (min, max, step) {\n  return Math.abs(max - min) / step;\n};\n/**\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\n\nexport var getJumpValue = function (min, max, step, jump) {\n  var steps = getSteps(min, max, step);\n  var value = jump !== null && jump !== void 0 ? jump : steps / 10 * step;\n\n  if (Number.isInteger(step)) {\n    return Math.ceil(value);\n  }\n\n  return value;\n};\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\n\nexport var isMouseEvent = function (event) {\n  return event.type === \"mousedown\" || event.type === \"mousemove\" || event.type === \"mouseup\";\n};\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\n\nexport var isTouchEvent = function (event) {\n  return event.type === \"touchstart\" || event.type === \"touchmove\" || event.type === \"touchend\";\n};\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\n\nexport var isRangeSlider = function (controls) {\n  return Array.isArray(controls.value);\n};\n/**\n * This is used to get the next value for the slider while being dragged via\n * mouse or touch.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\n\nexport var getDragValue = function (_a) {\n  var min = _a.min,\n      max = _a.max,\n      step = _a.step,\n      vertical = _a.vertical,\n      clientX = _a.clientX,\n      clientY = _a.clientY,\n      left = _a.left,\n      top = _a.top,\n      height = _a.height,\n      width = _a.width,\n      isRtl = _a.isRtl,\n      minValue = _a.minValue,\n      maxValue = _a.maxValue;\n  var sliderSize = vertical ? height : width;\n  var sliderPosition = vertical ? top + height : left;\n  var cursorPosition = vertical ? clientY : clientX;\n  var difference = vertical ? sliderPosition - cursorPosition : cursorPosition - sliderPosition;\n  var distanceDragged = Math.min(Math.max(0, difference), sliderSize);\n  var percentageDragged = distanceDragged / sliderSize;\n\n  if (isRtl && !vertical) {\n    percentageDragged = 1 - percentageDragged;\n  }\n\n  var range = max - min;\n  var steps = getSteps(min, max, step);\n  var value = percentageDragged * range + min;\n  var rounded = nearest(value, minValue, maxValue, steps, range);\n  return {\n    value: rounded,\n    current: percentageDragged\n  };\n};\n/**\n * Small util to get the drag percentage for the thumbs within a slider. This\n * makes sure to use the current `dragValue` when possible so that the thumb\n * moves with the mouse/touch instead of only for the current values. See\n * {@link getDragValue} for more examples.\n *\n * @remarks \\@since 2.5.0\n * @internal\n */\n\nexport var getDragPercentage = function (_a) {\n  var min = _a.min,\n      max = _a.max,\n      dragging = _a.dragging,\n      dragValue = _a.dragValue,\n      draggingIndex = _a.draggingIndex,\n      thumb1Value = _a.thumb1Value,\n      thumb2Value = _a.thumb2Value;\n  var thumb1Percentage = dragging && draggingIndex === 0 ? dragValue : getPercentage(min, max, thumb1Value);\n  var thumb2Percentage;\n\n  if (typeof thumb2Value === \"number\") {\n    var percentage = getPercentage(min, max, thumb2Value);\n    thumb1Percentage = Math.min(thumb1Percentage, percentage);\n    thumb2Percentage = dragging && draggingIndex === 1 ? Math.max(thumb1Percentage, dragValue) : percentage;\n  }\n\n  return {\n    thumb1Percentage: thumb1Percentage * 100 + \"%\",\n    thumb2Percentage: typeof thumb2Percentage === \"number\" ? thumb2Percentage * 100 + \"%\" : undefined\n  };\n};","map":{"version":3,"sources":["../../src/slider/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getPercentage, nearest } from \"@react-md/utils\";\n/**\n * Gets the number of steps in the allowed range of values.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport var getSteps = function (min, max, step) {\n    return Math.abs(max - min) / step;\n};\n/**\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport var getJumpValue = function (min, max, step, jump) {\n    var steps = getSteps(min, max, step);\n    var value = jump !== null && jump !== void 0 ? jump : (steps / 10) * step;\n    if (Number.isInteger(step)) {\n        return Math.ceil(value);\n    }\n    return value;\n};\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport var isMouseEvent = function (event) {\n    return event.type === \"mousedown\" ||\n        event.type === \"mousemove\" ||\n        event.type === \"mouseup\";\n};\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport var isTouchEvent = function (event) {\n    return event.type === \"touchstart\" ||\n        event.type === \"touchmove\" ||\n        event.type === \"touchend\";\n};\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport var isRangeSlider = function (controls) { return Array.isArray(controls.value); };\n/**\n * This is used to get the next value for the slider while being dragged via\n * mouse or touch.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport var getDragValue = function (_a) {\n    var min = _a.min, max = _a.max, step = _a.step, vertical = _a.vertical, clientX = _a.clientX, clientY = _a.clientY, left = _a.left, top = _a.top, height = _a.height, width = _a.width, isRtl = _a.isRtl, minValue = _a.minValue, maxValue = _a.maxValue;\n    var sliderSize = vertical ? height : width;\n    var sliderPosition = vertical ? top + height : left;\n    var cursorPosition = vertical ? clientY : clientX;\n    var difference = vertical\n        ? sliderPosition - cursorPosition\n        : cursorPosition - sliderPosition;\n    var distanceDragged = Math.min(Math.max(0, difference), sliderSize);\n    var percentageDragged = distanceDragged / sliderSize;\n    if (isRtl && !vertical) {\n        percentageDragged = 1 - percentageDragged;\n    }\n    var range = max - min;\n    var steps = getSteps(min, max, step);\n    var value = percentageDragged * range + min;\n    var rounded = nearest(value, minValue, maxValue, steps, range);\n    return {\n        value: rounded,\n        current: percentageDragged,\n    };\n};\n/**\n * Small util to get the drag percentage for the thumbs within a slider. This\n * makes sure to use the current `dragValue` when possible so that the thumb\n * moves with the mouse/touch instead of only for the current values. See\n * {@link getDragValue} for more examples.\n *\n * @remarks \\@since 2.5.0\n * @internal\n */\nexport var getDragPercentage = function (_a) {\n    var min = _a.min, max = _a.max, dragging = _a.dragging, dragValue = _a.dragValue, draggingIndex = _a.draggingIndex, thumb1Value = _a.thumb1Value, thumb2Value = _a.thumb2Value;\n    var thumb1Percentage = dragging && draggingIndex === 0\n        ? dragValue\n        : getPercentage(min, max, thumb1Value);\n    var thumb2Percentage;\n    if (typeof thumb2Value === \"number\") {\n        var percentage = getPercentage(min, max, thumb2Value);\n        thumb1Percentage = Math.min(thumb1Percentage, percentage);\n        thumb2Percentage =\n            dragging && draggingIndex === 1\n                ? Math.max(thumb1Percentage, dragValue)\n                : percentage;\n    }\n    return {\n        thumb1Percentage: thumb1Percentage * 100 + \"%\",\n        thumb2Percentage: typeof thumb2Percentage === \"number\"\n            ? thumb2Percentage * 100 + \"%\"\n            : undefined,\n    };\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}