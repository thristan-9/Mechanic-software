{"ast":null,"code":"import { useCallback, useState } from \"react\";\nimport { getViewportSize } from \"@react-md/utils\";\nimport { DEFAULT_TOOLTIP_THRESHOLD } from \"./constants\";\n/** @internal */\n\nvar noop = function () {// do nothing\n};\n/**\n * A hook that's used to determine the \"best\" position to render the tooltip\n * within the viewport.\n *\n * @internal\n * @remarks \\@since 2.8.0\n */\n\n\nexport function useTooltipPosition(_a) {\n  var determinedPosition = _a.position,\n      _b = _a.defaultPosition,\n      defaultPosition = _b === void 0 ? \"below\" : _b,\n      _c = _a.threshold,\n      threshold = _c === void 0 ? DEFAULT_TOOLTIP_THRESHOLD : _c;\n\n  var _d = useState(defaultPosition),\n      position = _d[0],\n      setPosition = _d[1];\n\n  var updatePosition = useCallback(function (container) {\n    var _a = container.getBoundingClientRect(),\n        top = _a.top,\n        left = _a.left;\n\n    var vh = getViewportSize(\"height\");\n    var vw = getViewportSize(\"width\");\n    var nextPosition = defaultPosition;\n\n    if (defaultPosition === \"above\" && top < vh * threshold) {\n      nextPosition = \"below\";\n    } else if (defaultPosition === \"below\" && top > vh * threshold) {\n      nextPosition = \"above\";\n    } else if (defaultPosition === \"left\" && left < vw * threshold) {\n      nextPosition = \"right\";\n    } else if (defaultPosition === \"right\" && left > vw * threshold) {\n      nextPosition = \"left\";\n    }\n\n    setPosition(nextPosition);\n  }, [defaultPosition, threshold]);\n\n  if (typeof determinedPosition !== \"undefined\") {\n    return [determinedPosition, noop];\n  }\n\n  return [position, updatePosition];\n}","map":{"version":3,"sources":["../src/useTooltipPosition.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AACA,SAAS,eAAT,QAAgD,iBAAhD;AAEA,SAAS,yBAAT,QAA0C,aAA1C;AAEA;;AACA,IAAM,IAAI,GAAG,YAAA,CACX;AACD,CAFD;AAmDA;;;;;;AAMG;;;AACH,OAAM,SAAU,kBAAV,CAA6B,EAA7B,EAIuB;MAHjB,kBAAkB,GAAA,EAAA,CAAA,Q;MAC5B,EAAA,GAAA,EAAA,CAAA,e;MAAA,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,OAAH,GAAU,E;MACzB,EAAA,GAAA,EAAA,CAAA,S;MAAA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,yBAAH,GAA4B,E;;AAE/B,MAAA,EAAA,GAA0B,QAAQ,CAAC,eAAD,CAAlC;AAAA,MAAC,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAT;AAAA,MAAW,WAAW,GAAA,EAAA,CAAA,CAAA,CAAtB;;AACN,MAAM,cAAc,GAAG,WAAW,CAChC,UAAC,SAAD,EAAU;AACF,QAAA,EAAA,GAAgB,SAAS,CAAC,qBAAV,EAAhB;AAAA,QAAE,GAAG,GAAA,EAAA,CAAA,GAAL;AAAA,QAAO,IAAI,GAAA,EAAA,CAAA,IAAX;;AACN,QAAM,EAAE,GAAG,eAAe,CAAC,QAAD,CAA1B;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,OAAD,CAA1B;AACA,QAAI,YAAY,GAAG,eAAnB;;AACA,QAAI,eAAe,KAAK,OAApB,IAA+B,GAAG,GAAG,EAAE,GAAG,SAA9C,EAAyD;AACvD,MAAA,YAAY,GAAG,OAAf;AACD,KAFD,MAEO,IAAI,eAAe,KAAK,OAApB,IAA+B,GAAG,GAAG,EAAE,GAAG,SAA9C,EAAyD;AAC9D,MAAA,YAAY,GAAG,OAAf;AACD,KAFM,MAEA,IAAI,eAAe,KAAK,MAApB,IAA8B,IAAI,GAAG,EAAE,GAAG,SAA9C,EAAyD;AAC9D,MAAA,YAAY,GAAG,OAAf;AACD,KAFM,MAEA,IAAI,eAAe,KAAK,OAApB,IAA+B,IAAI,GAAG,EAAE,GAAG,SAA/C,EAA0D;AAC/D,MAAA,YAAY,GAAG,MAAf;AACD;;AAED,IAAA,WAAW,CAAC,YAAD,CAAX;AACD,GAjB+B,EAkBhC,CAAC,eAAD,EAAkB,SAAlB,CAlBgC,CAAlC;;AAqBA,MAAI,OAAO,kBAAP,KAA8B,WAAlC,EAA+C;AAC7C,WAAO,CAAC,kBAAD,EAAqB,IAArB,CAAP;AACD;;AAED,SAAO,CAAC,QAAD,EAAW,cAAX,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { getViewportSize } from \"@react-md/utils\";\nimport { DEFAULT_TOOLTIP_THRESHOLD } from \"./constants\";\n/** @internal */\nvar noop = function () {\n    // do nothing\n};\n/**\n * A hook that's used to determine the \"best\" position to render the tooltip\n * within the viewport.\n *\n * @internal\n * @remarks \\@since 2.8.0\n */\nexport function useTooltipPosition(_a) {\n    var determinedPosition = _a.position, _b = _a.defaultPosition, defaultPosition = _b === void 0 ? \"below\" : _b, _c = _a.threshold, threshold = _c === void 0 ? DEFAULT_TOOLTIP_THRESHOLD : _c;\n    var _d = useState(defaultPosition), position = _d[0], setPosition = _d[1];\n    var updatePosition = useCallback(function (container) {\n        var _a = container.getBoundingClientRect(), top = _a.top, left = _a.left;\n        var vh = getViewportSize(\"height\");\n        var vw = getViewportSize(\"width\");\n        var nextPosition = defaultPosition;\n        if (defaultPosition === \"above\" && top < vh * threshold) {\n            nextPosition = \"below\";\n        }\n        else if (defaultPosition === \"below\" && top > vh * threshold) {\n            nextPosition = \"above\";\n        }\n        else if (defaultPosition === \"left\" && left < vw * threshold) {\n            nextPosition = \"right\";\n        }\n        else if (defaultPosition === \"right\" && left > vw * threshold) {\n            nextPosition = \"left\";\n        }\n        setPosition(nextPosition);\n    }, [defaultPosition, threshold]);\n    if (typeof determinedPosition !== \"undefined\") {\n        return [determinedPosition, noop];\n    }\n    return [position, updatePosition];\n}\n//# sourceMappingURL=useTooltipPosition.js.map"]},"metadata":{},"sourceType":"module"}