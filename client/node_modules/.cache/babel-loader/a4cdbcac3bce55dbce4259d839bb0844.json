{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { SimpleListItem } from \"@react-md/list\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-option\");\n/**\n * The Option component is a simple wrapper for the `SimpleListItem` that adds\n * some required a11y for behaving as the `option` role.\n */\n\nexport var Option = forwardRef(function Option(_a, ref) {\n  var className = _a.className,\n      _b = _a.selected,\n      selected = _b === void 0 ? false : _b,\n      focused = _a.focused,\n      children = _a.children,\n      _c = _a.textChildren,\n      textChildren = _c === void 0 ? true : _c,\n      props = __rest(_a, [\"className\", \"selected\", \"focused\", \"children\", \"textChildren\"]);\n\n  return React.createElement(SimpleListItem, __assign({}, props, {\n    ref: ref,\n    role: \"option\",\n    \"aria-selected\": selected || undefined,\n    clickable: true,\n    className: cn(block({\n      selected: selected,\n      focused: focused\n    }), className),\n    textChildren: textChildren\n  }), children);\n});\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    Option.propTypes = {\n      className: PropTypes.string,\n      focused: PropTypes.bool.isRequired,\n      selected: PropTypes.bool,\n      children: PropTypes.node,\n      textChildren: PropTypes.bool\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../../src/select/Option.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAkC,OAAlC;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,cAAT,QAAoD,gBAApD;AACA,SAAS,GAAT,QAAoB,iBAApB;AAgBA,IAAM,KAAK,GAAG,GAAG,CAAC,YAAD,CAAjB;AAEA;;;AAGG;;AACH,OAAO,IAAM,MAAM,GAAG,UAAU,CAA6B,SAAS,MAAT,CAC3D,EAD2D,EAS3D,GAT2D,EASxD;AAPD,MAAA,SAAS,GAAA,EAAA,CAAA,SAAT;AAAA,MACA,EAAA,GAAA,EAAA,CAAA,QADA;AAAA,MACA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EADhB;AAAA,MAEA,OAAO,GAAA,EAAA,CAAA,OAFP;AAAA,MAGA,QAAQ,GAAA,EAAA,CAAA,QAHR;AAAA,MAIA,EAAA,GAAA,EAAA,CAAA,YAJA;AAAA,MAIA,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAJnB;AAAA,MAKG,KAAK,GAAA,MAAA,CAAA,EAAA,EANV,CAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAA,cAAA,CAMU,CALR;;AASF,SACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,QAAA,CAAA,EAAA,EACT,KADS,EACJ;AACT,IAAA,GAAG,EAAE,GADI;AAET,IAAA,IAAI,EAAC,QAFI;AAEI,qBACE,QAAQ,IAAI,SAHlB;AAIT,IAAA,SAAS,EAAA,IAJA;AAKT,IAAA,SAAS,EAAE,EAAE,CACX,KAAK,CAAC;AACJ,MAAA,QAAQ,EAAA,QADJ;AAEJ,MAAA,OAAO,EAAA;AAFH,KAAD,CADM,EAKX,SALW,CALJ;AAYT,IAAA,YAAY,EAAE;AAZL,GADI,CAAf,EAeG,QAfH,CADF;AAmBD,CA9B+B,CAAzB;AAgCP;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,MAAM,CAAC,SAAP,GAAmB;AACjB,MAAA,SAAS,EAAE,SAAS,CAAC,MADJ;AAEjB,MAAA,OAAO,EAAE,SAAS,CAAC,IAAV,CAAe,UAFP;AAGjB,MAAA,QAAQ,EAAE,SAAS,CAAC,IAHH;AAIjB,MAAA,QAAQ,EAAE,SAAS,CAAC,IAJH;AAKjB,MAAA,YAAY,EAAE,SAAS,CAAC;AALP,KAAnB;AAOD,GAVD,CAUE,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { SimpleListItem } from \"@react-md/list\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-option\");\n/**\n * The Option component is a simple wrapper for the `SimpleListItem` that adds\n * some required a11y for behaving as the `option` role.\n */\nexport var Option = forwardRef(function Option(_a, ref) {\n    var className = _a.className, _b = _a.selected, selected = _b === void 0 ? false : _b, focused = _a.focused, children = _a.children, _c = _a.textChildren, textChildren = _c === void 0 ? true : _c, props = __rest(_a, [\"className\", \"selected\", \"focused\", \"children\", \"textChildren\"]);\n    return (React.createElement(SimpleListItem, __assign({}, props, { ref: ref, role: \"option\", \"aria-selected\": selected || undefined, clickable: true, className: cn(block({\n            selected: selected,\n            focused: focused,\n        }), className), textChildren: textChildren }), children));\n});\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        Option.propTypes = {\n            className: PropTypes.string,\n            focused: PropTypes.bool.isRequired,\n            selected: PropTypes.bool,\n            children: PropTypes.node,\n            textChildren: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=Option.js.map"]},"metadata":{},"sourceType":"module"}