{"ast":null,"code":"import cn from \"classnames\";\nimport { ENTER, ENTERED, ENTERING, EXIT, EXITED, EXITING } from \"./constants\";\nimport { getClassNames } from \"./getClassNames\";\nimport { getTimeout } from \"./getTimeout\";\nimport { useTransition } from \"./useTransition\";\n/**\n * This hook is heavily inspired by the `CSSTransition` component from\n * `react-transition-group` since it's really just a hook version for it.\n *\n * This hook allows you to transition class names for an element for enter and\n * exit transitions.\n *\n * There are two different ways to create an \"appear-only\"/\"on-mount-only\"\n * transition: use the `onEntered` callback to reset the `transitionIn` to\n * false, or manually fire the `ENTERED` action with the returned `dispatch`\n * function when it should be fired again.\n *\n * Example changing `transitionIn` for pathname changes:\n * ```ts\n * const [transitionIn, setTransitionIn] = useState(true);\n * const [rendered, transitionProps] = useCSSTransition({\n *   appear: true,\n *   timeout: { enter: 200 },\n *   transitionIn,\n *   onEntered: () => setTransitionIn(false),\n * });\n *\n * const prevPathname = useRef(pathname);\n * if (pathname !== prevPathname.current) {\n *   prevPathname.current = pathname;\n *   setTransitionIn(true)\n * }\n *\n * return (\n *   <div {...transitionProps}>\n *     <Switch>\n *       <Route path=\"/\" component={Home} />\n *       <Route path=\"/other\" component={Other} />\n *    </Switch>\n *   </div>\n * );\n * ```\n *\n * Example with `dispatch` for pathname changes:\n * ```ts\n * const [rendered, transitionProps, dispatch] = useCSSTransition({\n *   appear: true,\n *   timeout: { enter: 200 },\n *   transitionIn: true,\n * });\n *\n * const prevPathname = useRef(pathname);\n * if (pathname !== prevPathname.current) {\n *   prevPathname.current = pathname;\n *   dispatch(ENTERED);\n * }\n *\n * return (\n *   <div {...transitionProps}>\n *     <Switch>\n *       <Route path=\"/\" component={Home} />\n *       <Route path=\"/other\" component={Other} />\n *    </Switch>\n *   </div>\n * );\n * ```\n *\n * @see useCrossFade The `useCrossFade` is a good example of using this hook for\n * a custom CSS Transition.\n * @param options - The transition options\n * @returns An ordered list of a boolean if the component should be rendered,\n * transition props to provide to the transitioning element, a dispatch function\n * for triggering the transition manually (should not be used much), and the\n * current transition stage.\n */\n\nexport function useCSSTransition(_a) {\n  var _b = _a.appear,\n      appear = _b === void 0 ? false : _b,\n      _c = _a.temporary,\n      temporary = _c === void 0 ? false : _c,\n      timeout = _a.timeout,\n      transitionIn = _a.transitionIn,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExit = _a.onExit,\n      onExiting = _a.onExiting,\n      onExited = _a.onExited,\n      className = _a.className,\n      propClassNames = _a.classNames,\n      propRef = _a.ref;\n\n  var _d = useTransition({\n    ref: propRef,\n    appear: appear,\n    repaint: true,\n    timeout: timeout,\n    temporary: temporary,\n    transitionIn: transitionIn,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited\n  }),\n      rendered = _d.rendered,\n      stage = _d.stage,\n      ref = _d.ref,\n      appearing = _d.appearing,\n      dispatch = _d.dispatch;\n\n  var classNames = getClassNames(propClassNames, getTimeout(timeout, appear));\n  var isEntering = stage === ENTERING;\n  var isEnter = isEntering || stage === ENTER;\n  var isEntered = stage === ENTERED;\n  var isExiting = stage === EXITING;\n  var isExit = isExiting || stage === EXIT;\n  var isExited = stage === EXITED;\n  return [rendered, {\n    ref: ref,\n    className: cn(className, // Note: can't use the object syntax for classNames since it'll fail\n    // if the same classes are used for different phases since they'd have\n    // the same key in the object...\n    appearing && classNames.appear, appearing && isEntering && classNames.appearActive, appearing && isEntered && classNames.appearDone, !appearing && isEnter && classNames.enter, !appearing && isEntering && classNames.enterActive, !appearing && isEntered && classNames.enterDone, isExit && classNames.exit, isExiting && classNames.exitActive, isExited && classNames.exitDone) || undefined\n  }, dispatch, stage];\n}","map":{"version":3,"sources":["../src/useCSSTransition.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import cn from \"classnames\";\nimport { ENTER, ENTERED, ENTERING, EXIT, EXITED, EXITING, } from \"./constants\";\nimport { getClassNames } from \"./getClassNames\";\nimport { getTimeout } from \"./getTimeout\";\nimport { useTransition } from \"./useTransition\";\n/**\n * This hook is heavily inspired by the `CSSTransition` component from\n * `react-transition-group` since it's really just a hook version for it.\n *\n * This hook allows you to transition class names for an element for enter and\n * exit transitions.\n *\n * There are two different ways to create an \"appear-only\"/\"on-mount-only\"\n * transition: use the `onEntered` callback to reset the `transitionIn` to\n * false, or manually fire the `ENTERED` action with the returned `dispatch`\n * function when it should be fired again.\n *\n * Example changing `transitionIn` for pathname changes:\n * ```ts\n * const [transitionIn, setTransitionIn] = useState(true);\n * const [rendered, transitionProps] = useCSSTransition({\n *   appear: true,\n *   timeout: { enter: 200 },\n *   transitionIn,\n *   onEntered: () => setTransitionIn(false),\n * });\n *\n * const prevPathname = useRef(pathname);\n * if (pathname !== prevPathname.current) {\n *   prevPathname.current = pathname;\n *   setTransitionIn(true)\n * }\n *\n * return (\n *   <div {...transitionProps}>\n *     <Switch>\n *       <Route path=\"/\" component={Home} />\n *       <Route path=\"/other\" component={Other} />\n *    </Switch>\n *   </div>\n * );\n * ```\n *\n * Example with `dispatch` for pathname changes:\n * ```ts\n * const [rendered, transitionProps, dispatch] = useCSSTransition({\n *   appear: true,\n *   timeout: { enter: 200 },\n *   transitionIn: true,\n * });\n *\n * const prevPathname = useRef(pathname);\n * if (pathname !== prevPathname.current) {\n *   prevPathname.current = pathname;\n *   dispatch(ENTERED);\n * }\n *\n * return (\n *   <div {...transitionProps}>\n *     <Switch>\n *       <Route path=\"/\" component={Home} />\n *       <Route path=\"/other\" component={Other} />\n *    </Switch>\n *   </div>\n * );\n * ```\n *\n * @see useCrossFade The `useCrossFade` is a good example of using this hook for\n * a custom CSS Transition.\n * @param options - The transition options\n * @returns An ordered list of a boolean if the component should be rendered,\n * transition props to provide to the transitioning element, a dispatch function\n * for triggering the transition manually (should not be used much), and the\n * current transition stage.\n */\nexport function useCSSTransition(_a) {\n    var _b = _a.appear, appear = _b === void 0 ? false : _b, _c = _a.temporary, temporary = _c === void 0 ? false : _c, timeout = _a.timeout, transitionIn = _a.transitionIn, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, className = _a.className, propClassNames = _a.classNames, propRef = _a.ref;\n    var _d = useTransition({\n        ref: propRef,\n        appear: appear,\n        repaint: true,\n        timeout: timeout,\n        temporary: temporary,\n        transitionIn: transitionIn,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n    }), rendered = _d.rendered, stage = _d.stage, ref = _d.ref, appearing = _d.appearing, dispatch = _d.dispatch;\n    var classNames = getClassNames(propClassNames, getTimeout(timeout, appear));\n    var isEntering = stage === ENTERING;\n    var isEnter = isEntering || stage === ENTER;\n    var isEntered = stage === ENTERED;\n    var isExiting = stage === EXITING;\n    var isExit = isExiting || stage === EXIT;\n    var isExited = stage === EXITED;\n    return [\n        rendered,\n        {\n            ref: ref,\n            className: cn(className, \n            // Note: can't use the object syntax for classNames since it'll fail\n            // if the same classes are used for different phases since they'd have\n            // the same key in the object...\n            appearing && classNames.appear, appearing && isEntering && classNames.appearActive, appearing && isEntered && classNames.appearDone, !appearing && isEnter && classNames.enter, !appearing && isEntering && classNames.enterActive, !appearing && isEntered && classNames.enterDone, isExit && classNames.exit, isExiting && classNames.exitActive, isExited && classNames.exitDone) || undefined,\n        },\n        dispatch,\n        stage,\n    ];\n}\n//# sourceMappingURL=useCSSTransition.js.map"]},"metadata":{},"sourceType":"module"}