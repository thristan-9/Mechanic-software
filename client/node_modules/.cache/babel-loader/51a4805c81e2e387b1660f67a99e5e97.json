{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-list-subheader\");\n/**\n * This is a simple component that will render a `<li>` with the subheader\n * typography styles. It also supports an `inset` variant that adds some spacing\n * to the left of the text to align with other `ListItem` that have left addons.\n */\n\nexport var ListSubheader = forwardRef(function ListSubheader(_a, ref) {\n  var className = _a.className,\n      _b = _a.inset,\n      inset = _b === void 0 ? false : _b,\n      props = __rest(_a, [\"className\", \"inset\"]);\n\n  return React.createElement(\"li\", __assign({}, props, {\n    ref: ref,\n    className: cn(block({\n      inset: inset\n    }), className)\n  }));\n});\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    ListSubheader.propTypes = {\n      className: PropTypes.string,\n      inset: PropTypes.bool,\n      children: PropTypes.node\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../src/ListSubheader.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAkD,OAAlD;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,GAAT,QAAoB,iBAApB;AAUA,IAAM,KAAK,GAAG,GAAG,CAAC,oBAAD,CAAjB;AAEA;;;;AAIG;;AACH,OAAO,IAAM,aAAa,GAAG,UAAU,CACrC,SAAS,aAAT,CAAuB,EAAvB,EAA+D,GAA/D,EAAkE;AAAzC,MAAA,SAAS,GAAA,EAAA,CAAA,SAAT;AAAA,MAAW,EAAA,GAAA,EAAA,CAAA,KAAX;AAAA,MAAW,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAAxB;AAAA,MAA6B,KAAK,GAAA,MAAA,CAAA,EAAA,EAApC,CAAA,WAAA,EAAA,OAAA,CAAoC,CAAlC;;AACvB,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAQ,KAAR,EAAa;AAAE,IAAA,GAAG,EAAE,GAAP;AAAY,IAAA,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC;AAAE,MAAA,KAAK,EAAA;AAAP,KAAD,CAAN,EAAmB,SAAnB;AAAzB,GAAb,CAAA,CADF;AAGD,CALoC,CAAhC;AAQP;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,aAAa,CAAC,SAAd,GAA0B;AACxB,MAAA,SAAS,EAAE,SAAS,CAAC,MADG;AAExB,MAAA,KAAK,EAAE,SAAS,CAAC,IAFO;AAGxB,MAAA,QAAQ,EAAE,SAAS,CAAC;AAHI,KAA1B;AAKD,GARD,CAQE,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-list-subheader\");\n/**\n * This is a simple component that will render a `<li>` with the subheader\n * typography styles. It also supports an `inset` variant that adds some spacing\n * to the left of the text to align with other `ListItem` that have left addons.\n */\nexport var ListSubheader = forwardRef(function ListSubheader(_a, ref) {\n    var className = _a.className, _b = _a.inset, inset = _b === void 0 ? false : _b, props = __rest(_a, [\"className\", \"inset\"]);\n    return (React.createElement(\"li\", __assign({}, props, { ref: ref, className: cn(block({ inset: inset }), className) })));\n});\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        ListSubheader.propTypes = {\n            className: PropTypes.string,\n            inset: PropTypes.bool,\n            children: PropTypes.node,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=ListSubheader.js.map"]},"metadata":{},"sourceType":"module"}