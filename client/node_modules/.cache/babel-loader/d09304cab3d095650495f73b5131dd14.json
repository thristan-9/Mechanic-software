{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useEffect, useReducer, useRef } from \"react\";\nimport { useEnsuredRef } from \"@react-md/utils\";\nimport { ENTER, ENTERED, ENTERING, EXIT, EXITED, EXITING, UNMOUNT } from \"./constants\";\nimport { getNextStage } from \"./getNextStage\";\nimport { getTimeout } from \"./getTimeout\";\nimport { getTimeoutDuration } from \"./getTimeoutDuration\";\n/**\n *\n * @internal\n */\n\nvar reducer = function (state, action) {\n  switch (action) {\n    case ENTER:\n    case ENTERING:\n    case EXIT:\n    case EXITING:\n    case EXITED:\n      return __assign(__assign({}, state), {\n        rendered: true,\n        stage: action\n      });\n\n    case ENTERED:\n      return {\n        rendered: true,\n        stage: action,\n        appearing: false\n      };\n\n    case UNMOUNT:\n      return {\n        stage: EXITED,\n        rendered: false,\n        appearing: false\n      };\n\n    default:\n      return state;\n  }\n};\n/**\n *\n * @internal\n */\n\n\nvar INITIAL_STATE = {\n  appearing: false,\n  rendered: true,\n  stage: ENTERED\n};\n/**\n *\n * @internal\n */\n\nvar getInitialState = function (transitionIn, temporary, appear) {\n  return function () {\n    return {\n      rendered: !temporary || transitionIn,\n      appearing: appear && transitionIn,\n      stage: transitionIn && !appear ? ENTERED : EXITED\n    };\n  };\n};\n/**\n * This is heavily inspired by the `Transition` component from\n * `react-transition-group` since it's really just a hook version of it.\n *\n * This hook allows you to transition between an enter and exit state with\n * defined timeouts, but you'll most likely be looking for the\n * `useCSSTransition` instead.\n *\n * @param options - All the options used for the transition.\n * @returns An object describing the current transition stage and props that\n * should be passed to a component.\n */\n\n\nexport function useTransition(_a) {\n  var _b = _a.appear,\n      appear = _b === void 0 ? false : _b,\n      _c = _a.repaint,\n      repaint = _c === void 0 ? false : _c,\n      _d = _a.temporary,\n      temporary = _d === void 0 ? false : _d,\n      transitionIn = _a.transitionIn,\n      propTimeout = _a.timeout,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExit = _a.onExit,\n      onExiting = _a.onExiting,\n      onExited = _a.onExited,\n      propRef = _a.ref;\n\n  var _e = useReducer(reducer, INITIAL_STATE, getInitialState(transitionIn, temporary, appear)),\n      _f = _e[0],\n      stage = _f.stage,\n      rendered = _f.rendered,\n      appearing = _f.appearing,\n      dispatch = _e[1]; // need to store in mutable ref since these are mostly going to be arrow\n  // functions and shouldn't cause the transitions to change\n\n\n  var handlers = useRef({\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited\n  });\n  useEffect(function () {\n    handlers.current = {\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited\n    };\n  });\n  var timeout = getTimeout(propTimeout, appear);\n\n  var _g = useEnsuredRef(propRef),\n      nodeRef = _g[0],\n      refHandler = _g[1];\n\n  var disableEnterExitTransition = useRef(!appear || !transitionIn); // this effect handles the transition from:\n  // - EXITED -> ENTER\n  // - ENTERED -> EXIT\n  // - EXITED -> ENTERED (when enter timeout is 0)\n  // - ENTERED -> EXITED (when exit timeout is 0)\n  //\n  // all the dependencies are ignored except for `transitionIn` since the\n  // other values changing would actually cause more bugs and this effect\n  // really doesn't care if they changed.\n\n  useEffect(function () {\n    // should never trigger a transition on mount unless both the `appear` and\n    // `transitionIn` are enabled for the appear transition\n    if (disableEnterExitTransition.current) {\n      disableEnterExitTransition.current = false;\n      return;\n    }\n\n    var duration = 0;\n\n    if (transitionIn) {\n      duration = appearing ? timeout.appear : timeout.enter;\n    } else {\n      duration = timeout.exit;\n    }\n\n    if (duration > 0) {\n      dispatch(transitionIn ? ENTER : EXIT);\n    } else {\n      dispatch(transitionIn ? ENTERED : EXITED);\n    } // see comment above about why it's only `transitionIn`\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [transitionIn]);\n  var isFirstRender = useRef(true); // this effect handles the transitions for:\n  // - ENTER -> ENTERING\n  // - ENTERING -> ENTERED\n  // - EXIT -> EXITING\n  // - EXITING -> EXIT\n\n  useEffect(function () {\n    // need to skip the effects on first render since it should only be called\n    // after a transition change\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    var node = nodeRef.current;\n\n    if (node) {\n      if (repaint && stage !== EXITED && stage !== ENTERED) {\n        // force repaint for CSS transitions\n        // eslint-disable-next-line no-unused-expressions\n        node.scrollTop;\n      }\n\n      var _a = handlers.current,\n          onEnter_1 = _a.onEnter,\n          onEntering_1 = _a.onEntering,\n          onEntered_1 = _a.onEntered,\n          onExit_1 = _a.onExit,\n          onExiting_1 = _a.onExiting,\n          onExited_1 = _a.onExited;\n\n      switch (stage) {\n        case ENTER:\n          if (onEnter_1) {\n            onEnter_1(node, appearing);\n          }\n\n          break;\n\n        case ENTERING:\n          if (onEntering_1) {\n            onEntering_1(node, appearing);\n          }\n\n          break;\n\n        case ENTERED:\n          if (onEntered_1) {\n            onEntered_1(node, appearing);\n          }\n\n          break;\n\n        case EXIT:\n          if (onExit_1) {\n            onExit_1(node);\n          }\n\n          break;\n\n        case EXITING:\n          if (onExiting_1) {\n            onExiting_1(node);\n          }\n\n          break;\n\n        case EXITED:\n          if (onExited_1) {\n            onExited_1(node);\n          }\n\n          break;\n        // no default\n      }\n    }\n\n    var nextStage = getNextStage(stage);\n\n    if (stage === nextStage) {\n      if (stage === EXITED && temporary) {\n        dispatch(UNMOUNT);\n      }\n\n      return;\n    }\n\n    var duration = getTimeoutDuration(stage, timeout.appear, timeout.enter, timeout.exit, appearing);\n\n    if (duration <= 0) {\n      dispatch(nextStage);\n      return;\n    }\n\n    var dispatchTimeout = window.setTimeout(function () {\n      dispatch(nextStage);\n    }, duration);\n    return function () {\n      window.clearTimeout(dispatchTimeout);\n    };\n  }, [nodeRef, appearing, repaint, stage, temporary, timeout.appear, timeout.enter, timeout.exit]);\n  return {\n    ref: refHandler,\n    stage: stage,\n    rendered: rendered,\n    appearing: appearing,\n    dispatch: dispatch\n  };\n}","map":{"version":3,"sources":["../src/useTransition.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useEffect, useReducer, useRef } from \"react\";\nimport { useEnsuredRef } from \"@react-md/utils\";\nimport { ENTER, ENTERED, ENTERING, EXIT, EXITED, EXITING, UNMOUNT, } from \"./constants\";\nimport { getNextStage } from \"./getNextStage\";\nimport { getTimeout } from \"./getTimeout\";\nimport { getTimeoutDuration } from \"./getTimeoutDuration\";\n/**\n *\n * @internal\n */\nvar reducer = function (state, action) {\n    switch (action) {\n        case ENTER:\n        case ENTERING:\n        case EXIT:\n        case EXITING:\n        case EXITED:\n            return __assign(__assign({}, state), { rendered: true, stage: action });\n        case ENTERED:\n            return { rendered: true, stage: action, appearing: false };\n        case UNMOUNT:\n            return { stage: EXITED, rendered: false, appearing: false };\n        default:\n            return state;\n    }\n};\n/**\n *\n * @internal\n */\nvar INITIAL_STATE = {\n    appearing: false,\n    rendered: true,\n    stage: ENTERED,\n};\n/**\n *\n * @internal\n */\nvar getInitialState = function (transitionIn, temporary, appear) { return function () {\n    return {\n        rendered: !temporary || transitionIn,\n        appearing: appear && transitionIn,\n        stage: transitionIn && !appear ? ENTERED : EXITED,\n    };\n}; };\n/**\n * This is heavily inspired by the `Transition` component from\n * `react-transition-group` since it's really just a hook version of it.\n *\n * This hook allows you to transition between an enter and exit state with\n * defined timeouts, but you'll most likely be looking for the\n * `useCSSTransition` instead.\n *\n * @param options - All the options used for the transition.\n * @returns An object describing the current transition stage and props that\n * should be passed to a component.\n */\nexport function useTransition(_a) {\n    var _b = _a.appear, appear = _b === void 0 ? false : _b, _c = _a.repaint, repaint = _c === void 0 ? false : _c, _d = _a.temporary, temporary = _d === void 0 ? false : _d, transitionIn = _a.transitionIn, propTimeout = _a.timeout, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, propRef = _a.ref;\n    var _e = useReducer(reducer, INITIAL_STATE, getInitialState(transitionIn, temporary, appear)), _f = _e[0], stage = _f.stage, rendered = _f.rendered, appearing = _f.appearing, dispatch = _e[1];\n    // need to store in mutable ref since these are mostly going to be arrow\n    // functions and shouldn't cause the transitions to change\n    var handlers = useRef({\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n    });\n    useEffect(function () {\n        handlers.current = {\n            onEnter: onEnter,\n            onEntering: onEntering,\n            onEntered: onEntered,\n            onExit: onExit,\n            onExiting: onExiting,\n            onExited: onExited,\n        };\n    });\n    var timeout = getTimeout(propTimeout, appear);\n    var _g = useEnsuredRef(propRef), nodeRef = _g[0], refHandler = _g[1];\n    var disableEnterExitTransition = useRef(!appear || !transitionIn);\n    // this effect handles the transition from:\n    // - EXITED -> ENTER\n    // - ENTERED -> EXIT\n    // - EXITED -> ENTERED (when enter timeout is 0)\n    // - ENTERED -> EXITED (when exit timeout is 0)\n    //\n    // all the dependencies are ignored except for `transitionIn` since the\n    // other values changing would actually cause more bugs and this effect\n    // really doesn't care if they changed.\n    useEffect(function () {\n        // should never trigger a transition on mount unless both the `appear` and\n        // `transitionIn` are enabled for the appear transition\n        if (disableEnterExitTransition.current) {\n            disableEnterExitTransition.current = false;\n            return;\n        }\n        var duration = 0;\n        if (transitionIn) {\n            duration = appearing ? timeout.appear : timeout.enter;\n        }\n        else {\n            duration = timeout.exit;\n        }\n        if (duration > 0) {\n            dispatch(transitionIn ? ENTER : EXIT);\n        }\n        else {\n            dispatch(transitionIn ? ENTERED : EXITED);\n        }\n        // see comment above about why it's only `transitionIn`\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [transitionIn]);\n    var isFirstRender = useRef(true);\n    // this effect handles the transitions for:\n    // - ENTER -> ENTERING\n    // - ENTERING -> ENTERED\n    // - EXIT -> EXITING\n    // - EXITING -> EXIT\n    useEffect(function () {\n        // need to skip the effects on first render since it should only be called\n        // after a transition change\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        var node = nodeRef.current;\n        if (node) {\n            if (repaint && stage !== EXITED && stage !== ENTERED) {\n                // force repaint for CSS transitions\n                // eslint-disable-next-line no-unused-expressions\n                node.scrollTop;\n            }\n            var _a = handlers.current, onEnter_1 = _a.onEnter, onEntering_1 = _a.onEntering, onEntered_1 = _a.onEntered, onExit_1 = _a.onExit, onExiting_1 = _a.onExiting, onExited_1 = _a.onExited;\n            switch (stage) {\n                case ENTER:\n                    if (onEnter_1) {\n                        onEnter_1(node, appearing);\n                    }\n                    break;\n                case ENTERING:\n                    if (onEntering_1) {\n                        onEntering_1(node, appearing);\n                    }\n                    break;\n                case ENTERED:\n                    if (onEntered_1) {\n                        onEntered_1(node, appearing);\n                    }\n                    break;\n                case EXIT:\n                    if (onExit_1) {\n                        onExit_1(node);\n                    }\n                    break;\n                case EXITING:\n                    if (onExiting_1) {\n                        onExiting_1(node);\n                    }\n                    break;\n                case EXITED:\n                    if (onExited_1) {\n                        onExited_1(node);\n                    }\n                    break;\n                // no default\n            }\n        }\n        var nextStage = getNextStage(stage);\n        if (stage === nextStage) {\n            if (stage === EXITED && temporary) {\n                dispatch(UNMOUNT);\n            }\n            return;\n        }\n        var duration = getTimeoutDuration(stage, timeout.appear, timeout.enter, timeout.exit, appearing);\n        if (duration <= 0) {\n            dispatch(nextStage);\n            return;\n        }\n        var dispatchTimeout = window.setTimeout(function () {\n            dispatch(nextStage);\n        }, duration);\n        return function () {\n            window.clearTimeout(dispatchTimeout);\n        };\n    }, [\n        nodeRef,\n        appearing,\n        repaint,\n        stage,\n        temporary,\n        timeout.appear,\n        timeout.enter,\n        timeout.exit,\n    ]);\n    return {\n        ref: refHandler,\n        stage: stage,\n        rendered: rendered,\n        appearing: appearing,\n        dispatch: dispatch,\n    };\n}\n//# sourceMappingURL=useTransition.js.map"]},"metadata":{},"sourceType":"module"}