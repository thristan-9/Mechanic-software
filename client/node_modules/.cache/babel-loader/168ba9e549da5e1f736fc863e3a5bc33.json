{"ast":null,"code":"import { CROSS_FADE_CLASSNAMES, CROSS_FADE_TIMEOUT } from \"./constants\";\nimport { useCSSTransition } from \"./useCSSTransition\";\n/**\n * This is a simple wrapper for the `useCSSTransition` that will allow you to\n * trigger cross fade transitions. The default behavior for this hook triggers\n * the transition immediately once mounted. This is great if it is being used\n * for new data appearing in a list, but not super great for route transitions.\n *\n * If you want to create a route transition, it's recommended to set the\n * `appear` option to `false` and then manually fire the `ENTER` transition from\n * the `dispatch` function. Here's a quick example using the `Layout` component\n * from `@react-md/layout` and `react-router`.\n *\n * ```tsx\n * import { useLocation, BrowserRouter } from \"react-router-dom\";\n * import { useCrossFade, ENTER } from \"@react-md/transition\";\n *\n * const App = () => {\n *   const { pathname } = useLocation();\n *   const [, { ref, className }, dispatch] = useCrossFade({\n *     appear: false,\n *   });\n *\n *   const prevPathname = useRef(pathname);\n *   if (pathname !== prevPathname.current) {\n *     prevPathname.current = pathname;\n *     dispatch(ENTER);\n *   }\n *\n *   return (\n *     <Layout\n *       {...useLayoutNavigation(navItems, pathname)}\n *       appBarTitle=\"My App\"\n *       mainRef={ref}\n *       mainClassName={className}\n *     >\n *       {children}\n *     </Layout>\n *   );\n * }\n * ```\n *\n * @param options - Any additional options and configuration that should be used\n * for the transition.\n * @returns An ordered list of a boolean if the component should be rendered,\n * transition props to provide to the transitioning element, a dispatch function\n * for triggering the transition manually (should not be used much), and the\n * current transition stage.\n */\n\nexport function useCrossFade(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.appear,\n      appear = _c === void 0 ? false : _c,\n      _d = _b.temporary,\n      temporary = _d === void 0 ? false : _d,\n      _e = _b.transitionIn,\n      transitionIn = _e === void 0 ? true : _e,\n      className = _b.className,\n      onEnter = _b.onEnter,\n      onEntering = _b.onEntering,\n      onEntered = _b.onEntered,\n      onExit = _b.onExit,\n      onExiting = _b.onExiting,\n      onExited = _b.onExited;\n\n  return useCSSTransition({\n    appear: appear,\n    timeout: CROSS_FADE_TIMEOUT,\n    classNames: CROSS_FADE_CLASSNAMES,\n    transitionIn: transitionIn,\n    className: className,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    temporary: temporary\n  });\n}","map":{"version":3,"sources":["../src/useCrossFade.ts"],"names":[],"mappings":"AAAA,SAAS,qBAAT,EAAgC,kBAAhC,QAA0D,aAA1D;AAEA,SAAmC,gBAAnC,QAA2D,oBAA3D;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG;;AACH,OAAM,SAAU,YAAV,CAA+D,EAA/D,EAWqB;MAX0C,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAW5C,EAX4C,GAW1C,E;MAVzB,EAAA,GAAA,EAAA,CAAA,M;MAAA,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MACd,EAAA,GAAA,EAAA,CAAA,S;MAAA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MACjB,EAAA,GAAA,EAAA,CAAA,Y;MAAA,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;MACnB,SAAS,GAAA,EAAA,CAAA,S;MACT,OAAO,GAAA,EAAA,CAAA,O;MACP,UAAU,GAAA,EAAA,CAAA,U;MACV,SAAS,GAAA,EAAA,CAAA,S;MACT,MAAM,GAAA,EAAA,CAAA,M;MACN,SAAS,GAAA,EAAA,CAAA,S;MACT,QAAQ,GAAA,EAAA,CAAA,Q;;AAER,SAAO,gBAAgB,CAAC;AACtB,IAAA,MAAM,EAAA,MADgB;AAEtB,IAAA,OAAO,EAAE,kBAFa;AAGtB,IAAA,UAAU,EAAE,qBAHU;AAItB,IAAA,YAAY,EAAA,YAJU;AAKtB,IAAA,SAAS,EAAA,SALa;AAMtB,IAAA,OAAO,EAAA,OANe;AAOtB,IAAA,UAAU,EAAA,UAPY;AAQtB,IAAA,SAAS,EAAA,SARa;AAStB,IAAA,MAAM,EAAA,MATgB;AAUtB,IAAA,SAAS,EAAA,SAVa;AAWtB,IAAA,QAAQ,EAAA,QAXc;AAYtB,IAAA,SAAS,EAAA;AAZa,GAAD,CAAvB;AAcD","sourceRoot":"","sourcesContent":["import { CROSS_FADE_CLASSNAMES, CROSS_FADE_TIMEOUT } from \"./constants\";\nimport { useCSSTransition } from \"./useCSSTransition\";\n/**\n * This is a simple wrapper for the `useCSSTransition` that will allow you to\n * trigger cross fade transitions. The default behavior for this hook triggers\n * the transition immediately once mounted. This is great if it is being used\n * for new data appearing in a list, but not super great for route transitions.\n *\n * If you want to create a route transition, it's recommended to set the\n * `appear` option to `false` and then manually fire the `ENTER` transition from\n * the `dispatch` function. Here's a quick example using the `Layout` component\n * from `@react-md/layout` and `react-router`.\n *\n * ```tsx\n * import { useLocation, BrowserRouter } from \"react-router-dom\";\n * import { useCrossFade, ENTER } from \"@react-md/transition\";\n *\n * const App = () => {\n *   const { pathname } = useLocation();\n *   const [, { ref, className }, dispatch] = useCrossFade({\n *     appear: false,\n *   });\n *\n *   const prevPathname = useRef(pathname);\n *   if (pathname !== prevPathname.current) {\n *     prevPathname.current = pathname;\n *     dispatch(ENTER);\n *   }\n *\n *   return (\n *     <Layout\n *       {...useLayoutNavigation(navItems, pathname)}\n *       appBarTitle=\"My App\"\n *       mainRef={ref}\n *       mainClassName={className}\n *     >\n *       {children}\n *     </Layout>\n *   );\n * }\n * ```\n *\n * @param options - Any additional options and configuration that should be used\n * for the transition.\n * @returns An ordered list of a boolean if the component should be rendered,\n * transition props to provide to the transitioning element, a dispatch function\n * for triggering the transition manually (should not be used much), and the\n * current transition stage.\n */\nexport function useCrossFade(_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.appear, appear = _c === void 0 ? false : _c, _d = _b.temporary, temporary = _d === void 0 ? false : _d, _e = _b.transitionIn, transitionIn = _e === void 0 ? true : _e, className = _b.className, onEnter = _b.onEnter, onEntering = _b.onEntering, onEntered = _b.onEntered, onExit = _b.onExit, onExiting = _b.onExiting, onExited = _b.onExited;\n    return useCSSTransition({\n        appear: appear,\n        timeout: CROSS_FADE_TIMEOUT,\n        classNames: CROSS_FADE_CLASSNAMES,\n        transitionIn: transitionIn,\n        className: className,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n        temporary: temporary,\n    });\n}\n//# sourceMappingURL=useCrossFade.js.map"]},"metadata":{},"sourceType":"module"}