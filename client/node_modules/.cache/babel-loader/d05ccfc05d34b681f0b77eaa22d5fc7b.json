{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useIsUserInteractionMode } from \"@react-md/utils\";\n/**\n * @internal\n */\n\nvar noop = function () {// do nothing\n};\n/**\n * This is a completely internal hook that helps control the visibility of the\n * discrete value tooltip's visibility for the `Slider` and `RangeSlider`.\n *\n * Note: This isn't 100% there since the tooltip doesn't animate in when the\n * user holds the mouse down in the same spot for the `animationDuration`.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\n\n\nexport function useDiscreteValueVisibility(_a) {\n  var active = _a.active,\n      animate = _a.animate,\n      animationDuration = _a.animationDuration,\n      discrete = _a.discrete,\n      disabled = _a.disabled,\n      _b = _a.onBlur,\n      propOnBlur = _b === void 0 ? noop : _b,\n      _c = _a.onFocus,\n      propOnFocus = _c === void 0 ? noop : _c;\n  var ref = useRef(null);\n  var isKeyboard = useIsUserInteractionMode(\"keyboard\"); // when the user interaction mode changes from keyboard -> mouse by clicking\n  // on the track, need to make sure that the thumb value has the animation\n  // state enabled so it moves at the same speed as the thumb instead of jumping\n  // immediately\n\n  var _d = useState(false),\n      isModeTransition = _d[0],\n      setModeTransition = _d[1];\n\n  var _e = useState(false),\n      visible = _e[0],\n      setVisible = _e[1];\n\n  if (discrete && visible && disabled) {\n    setVisible(false);\n  }\n\n  useEffect(function () {\n    if (!discrete) {\n      setVisible(false);\n      setModeTransition(false);\n      return;\n    }\n\n    if (!isKeyboard) {\n      // only considered a \"transition\" when the tooltip is already visible and\n      // switching away from keyboard mode\n      setModeTransition(visible);\n      return;\n    } // when swapping from mouse/touch -> keyboard, the tooltip's visibility will\n    // need to be enabled since default drag behavior is to hide on drag end.\n    // The drag process automatically focuses the current \"target\" thumb to help\n    // the user switch between the modes more easily so if the active element is\n    // the current thumb, we're good to go\n\n\n    setModeTransition(false);\n    setVisible(document.activeElement === ref.current);\n  }, [isKeyboard, visible, discrete]);\n  useEffect(function () {\n    if (!discrete) {\n      return;\n    }\n\n    if (!active) {\n      setVisible(false);\n      setModeTransition(false);\n      return;\n    } // need to delay the visibility for the same `animationDuration` as the\n    // thumb's active state so that the tooltip appears at the same time the\n    // thumb stops animating with click drag events\n\n\n    var timeout = window.setTimeout(function () {\n      setVisible(true);\n      setModeTransition(false);\n    }, animationDuration);\n    return function () {\n      window.clearTimeout(timeout);\n    };\n  }, [active, animationDuration, discrete]);\n  var onBlur = useCallback(function (event) {\n    propOnBlur(event);\n    var track = event.currentTarget.parentElement; // need to hide on blur because it _usually_ means the user clicked\n    // somewhere else on the page after using the keyboard. However, it is\n    // possible the user used the keyboard to update the value and then\n    // clicked on the track to update more quickly, so verify that the next\n    // focus element isn't the track or any children of the track.\n\n    if (!track || document.activeElement || !track.contains(document.activeElement)) {\n      ref.current = null;\n      setVisible(false);\n    }\n  }, [propOnBlur]);\n  var onFocus = useCallback(function (event) {\n    ref.current = event.currentTarget;\n    propOnFocus(event);\n\n    if (discrete && isKeyboard) {\n      setVisible(true);\n    }\n  }, [discrete, propOnFocus, isKeyboard]);\n  return {\n    onBlur: onBlur,\n    onFocus: onFocus,\n    animateValue: isModeTransition || animate && isKeyboard,\n    visible: visible\n  };\n}","map":{"version":3,"sources":["../../src/slider/useDiscreteValueVisibility.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useCallback, useEffect, useRef, useState, } from \"react\";\nimport { useIsUserInteractionMode } from \"@react-md/utils\";\n/**\n * @internal\n */\nvar noop = function () {\n    // do nothing\n};\n/**\n * This is a completely internal hook that helps control the visibility of the\n * discrete value tooltip's visibility for the `Slider` and `RangeSlider`.\n *\n * Note: This isn't 100% there since the tooltip doesn't animate in when the\n * user holds the mouse down in the same spot for the `animationDuration`.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport function useDiscreteValueVisibility(_a) {\n    var active = _a.active, animate = _a.animate, animationDuration = _a.animationDuration, discrete = _a.discrete, disabled = _a.disabled, _b = _a.onBlur, propOnBlur = _b === void 0 ? noop : _b, _c = _a.onFocus, propOnFocus = _c === void 0 ? noop : _c;\n    var ref = useRef(null);\n    var isKeyboard = useIsUserInteractionMode(\"keyboard\");\n    // when the user interaction mode changes from keyboard -> mouse by clicking\n    // on the track, need to make sure that the thumb value has the animation\n    // state enabled so it moves at the same speed as the thumb instead of jumping\n    // immediately\n    var _d = useState(false), isModeTransition = _d[0], setModeTransition = _d[1];\n    var _e = useState(false), visible = _e[0], setVisible = _e[1];\n    if (discrete && visible && disabled) {\n        setVisible(false);\n    }\n    useEffect(function () {\n        if (!discrete) {\n            setVisible(false);\n            setModeTransition(false);\n            return;\n        }\n        if (!isKeyboard) {\n            // only considered a \"transition\" when the tooltip is already visible and\n            // switching away from keyboard mode\n            setModeTransition(visible);\n            return;\n        }\n        // when swapping from mouse/touch -> keyboard, the tooltip's visibility will\n        // need to be enabled since default drag behavior is to hide on drag end.\n        // The drag process automatically focuses the current \"target\" thumb to help\n        // the user switch between the modes more easily so if the active element is\n        // the current thumb, we're good to go\n        setModeTransition(false);\n        setVisible(document.activeElement === ref.current);\n    }, [isKeyboard, visible, discrete]);\n    useEffect(function () {\n        if (!discrete) {\n            return;\n        }\n        if (!active) {\n            setVisible(false);\n            setModeTransition(false);\n            return;\n        }\n        // need to delay the visibility for the same `animationDuration` as the\n        // thumb's active state so that the tooltip appears at the same time the\n        // thumb stops animating with click drag events\n        var timeout = window.setTimeout(function () {\n            setVisible(true);\n            setModeTransition(false);\n        }, animationDuration);\n        return function () {\n            window.clearTimeout(timeout);\n        };\n    }, [active, animationDuration, discrete]);\n    var onBlur = useCallback(function (event) {\n        propOnBlur(event);\n        var track = event.currentTarget.parentElement;\n        // need to hide on blur because it _usually_ means the user clicked\n        // somewhere else on the page after using the keyboard. However, it is\n        // possible the user used the keyboard to update the value and then\n        // clicked on the track to update more quickly, so verify that the next\n        // focus element isn't the track or any children of the track.\n        if (!track ||\n            document.activeElement ||\n            !track.contains(document.activeElement)) {\n            ref.current = null;\n            setVisible(false);\n        }\n    }, [propOnBlur]);\n    var onFocus = useCallback(function (event) {\n        ref.current = event.currentTarget;\n        propOnFocus(event);\n        if (discrete && isKeyboard) {\n            setVisible(true);\n        }\n    }, [discrete, propOnFocus, isKeyboard]);\n    return {\n        onBlur: onBlur,\n        onFocus: onFocus,\n        animateValue: isModeTransition || (animate && isKeyboard),\n        visible: visible,\n    };\n}\n//# sourceMappingURL=useDiscreteValueVisibility.js.map"]},"metadata":{},"sourceType":"module"}