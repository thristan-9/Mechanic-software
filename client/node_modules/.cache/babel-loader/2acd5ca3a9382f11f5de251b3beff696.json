{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { getContainer } from \"./getContainer\";\n/**\n * This component is a simple wrapper for the `createPortal` API from ReactDOM\n * that will just ensure that `null` is always returned for server side\n * rendering as well as a \"nice\" way to choose specific portal targets or just\n * falling back to the `document.body`.\n */\n\nexport function Portal(_a) {\n  var into = _a.into,\n      intoId = _a.intoId,\n      children = _a.children;\n\n  var _b = useState(null),\n      container = _b[0],\n      setContainer = _b[1]; // setting the container via useEffect instead of immediately in the render\n  // just so that it doesn't throw an error immediately if the dom hasn't fully\n  // painted after a SSR\n\n\n  useEffect(function () {\n    var nextContainer = getContainer(into, intoId);\n\n    if (container !== nextContainer) {\n      setContainer(nextContainer);\n    }\n  }, [into, intoId, container]);\n\n  if (!container) {\n    return null;\n  }\n\n  return createPortal(children, container);\n}\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    Portal.propTypes = {\n      into: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n      intoId: PropTypes.string,\n      children: PropTypes.node\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../src/Portal.tsx"],"names":[],"mappings":"AAAA,SAAkC,SAAlC,EAA6C,QAA7C,QAA6D,OAA7D;AACA,SAAS,YAAT,QAA6B,WAA7B;AAEA,SAAS,YAAT,QAAyC,gBAAzC;AA2BA;;;;;AAKG;;AACH,OAAM,SAAU,MAAV,CAAiB,EAAjB,EAIQ;MAHZ,IAAI,GAAA,EAAA,CAAA,I;MACJ,MAAM,GAAA,EAAA,CAAA,M;MACN,QAAQ,GAAA,EAAA,CAAA,Q;;AAEF,MAAA,EAAA,GAA4B,QAAQ,CAAqB,IAArB,CAApC;AAAA,MAAC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAV;AAAA,MAAY,YAAY,GAAA,EAAA,CAAA,CAAA,CAAxB,CADM,CAGZ;AACA;AACA;;;AACA,EAAA,SAAS,CAAC,YAAA;AACR,QAAM,aAAa,GAAG,YAAY,CAAC,IAAD,EAAO,MAAP,CAAlC;;AACA,QAAI,SAAS,KAAK,aAAlB,EAAiC;AAC/B,MAAA,YAAY,CAAC,aAAD,CAAZ;AACD;AACF,GALQ,EAKN,CAAC,IAAD,EAAO,MAAP,EAAe,SAAf,CALM,CAAT;;AAOA,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,SAAO,YAAY,CAAC,QAAD,EAAW,SAAX,CAAnB;AACD;AAED;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,MAAM,CAAC,SAAP,GAAmB;AACjB,MAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,CACxB,SAAS,CAAC,MADc,EAExB,SAAS,CAAC,IAFc,EAGxB,SAAS,CAAC,MAHc,CAApB,CADW;AAMjB,MAAA,MAAM,EAAE,SAAS,CAAC,MAND;AAOjB,MAAA,QAAQ,EAAE,SAAS,CAAC;AAPH,KAAnB;AASD,GAZD,CAYE,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { getContainer } from \"./getContainer\";\n/**\n * This component is a simple wrapper for the `createPortal` API from ReactDOM\n * that will just ensure that `null` is always returned for server side\n * rendering as well as a \"nice\" way to choose specific portal targets or just\n * falling back to the `document.body`.\n */\nexport function Portal(_a) {\n    var into = _a.into, intoId = _a.intoId, children = _a.children;\n    var _b = useState(null), container = _b[0], setContainer = _b[1];\n    // setting the container via useEffect instead of immediately in the render\n    // just so that it doesn't throw an error immediately if the dom hasn't fully\n    // painted after a SSR\n    useEffect(function () {\n        var nextContainer = getContainer(into, intoId);\n        if (container !== nextContainer) {\n            setContainer(nextContainer);\n        }\n    }, [into, intoId, container]);\n    if (!container) {\n        return null;\n    }\n    return createPortal(children, container);\n}\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        Portal.propTypes = {\n            into: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.func,\n                PropTypes.object,\n            ]),\n            intoId: PropTypes.string,\n            children: PropTypes.node,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=Portal.js.map"]},"metadata":{},"sourceType":"module"}