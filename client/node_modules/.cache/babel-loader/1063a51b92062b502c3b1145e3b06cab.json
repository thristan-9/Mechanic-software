{"ast":null,"code":"import { useCallback, useState } from \"react\";\n/**\n * This hook can be used to control the state of a radio group or a select\n * element.\n *\n * @param defaultValue - The default value. If you want the user to specifically\n * choose a value, set this to the empty string.\n * @param onChange - An optional change event handler to also call when the\n * change event is triggered.\n * @returns a list containing the current value, a change event handler, and\n * then a manual value setter.\n */\n\nexport function useChoice(defaultValue, onChange) {\n  var _a = useState(defaultValue),\n      value = _a[0],\n      setValue = _a[1];\n\n  var handleChange = useCallback(function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n\n    setValue(event.currentTarget.value);\n  }, [onChange]);\n  return [value, handleChange, setValue];\n}","map":{"version":3,"sources":["../src/useChoice.ts"],"names":[],"mappings":"AAAA,SAA0C,WAA1C,EAAuD,QAAvD,QAAuE,OAAvE;AAWA;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,SAAV,CAIJ,YAJI,EAKJ,QALI,EAK4B;AAE1B,MAAA,EAAA,GAAoB,QAAQ,CAAI,YAAJ,CAA5B;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAhB;;AACN,MAAM,YAAY,GAAG,WAAW,CAC9B,UAAC,KAAD,EAAM;AACJ,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,KAAD,CAAR;AACD;;AAED,IAAA,QAAQ,CAAC,KAAK,CAAC,aAAN,CAAoB,KAArB,CAAR;AACD,GAP6B,EAQ9B,CAAC,QAAD,CAR8B,CAAhC;AAWA,SAAO,CAAC,KAAD,EAAQ,YAAR,EAAsB,QAAtB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useState } from \"react\";\n/**\n * This hook can be used to control the state of a radio group or a select\n * element.\n *\n * @param defaultValue - The default value. If you want the user to specifically\n * choose a value, set this to the empty string.\n * @param onChange - An optional change event handler to also call when the\n * change event is triggered.\n * @returns a list containing the current value, a change event handler, and\n * then a manual value setter.\n */\nexport function useChoice(defaultValue, onChange) {\n    var _a = useState(defaultValue), value = _a[0], setValue = _a[1];\n    var handleChange = useCallback(function (event) {\n        if (onChange) {\n            onChange(event);\n        }\n        setValue(event.currentTarget.value);\n    }, [onChange]);\n    return [value, handleChange, setValue];\n}\n//# sourceMappingURL=useChoice.js.map"]},"metadata":{},"sourceType":"module"}