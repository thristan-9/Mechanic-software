{"ast":null,"code":"import React from \"react\";\nimport { ListItemAddon } from \"./ListItemAddon\";\nimport { ListItemText } from \"./ListItemText\";\n/**\n * The `ListItemChildren` component is used to create a styled list item that\n * can have optional addons to the left or right of the children in the form of\n * icons, avatars, or media. The `children` can be replaced by the `primaryText`\n * and `secondaryText` props to create stacked text spanning two or more lines\n * with the default behavior of using `line-clamp` at three lines.\n *\n * Note: This will return a `React.Fragment` of the children and does not wrap\n * in a DOM node for styling. The parent component should normally have\n * `display: flex` for the styling to work.\n */\n\nexport function ListItemChildren(_a) {\n  var textClassName = _a.textClassName,\n      secondaryTextClassName = _a.secondaryTextClassName,\n      textChildren = _a.textChildren,\n      primaryText = _a.primaryText,\n      secondaryText = _a.secondaryText,\n      leftAddon = _a.leftAddon,\n      _b = _a.leftAddonType,\n      leftAddonType = _b === void 0 ? \"icon\" : _b,\n      _c = _a.leftAddonPosition,\n      leftAddonPosition = _c === void 0 ? \"middle\" : _c,\n      rightAddon = _a.rightAddon,\n      _d = _a.rightAddonType,\n      rightAddonType = _d === void 0 ? \"icon\" : _d,\n      _e = _a.rightAddonPosition,\n      rightAddonPosition = _e === void 0 ? \"middle\" : _e,\n      forceAddonWrap = _a.forceAddonWrap,\n      propChildren = _a.children;\n  var stringifiedChildren = typeof propChildren === \"number\" ? \"\" + propChildren : propChildren;\n  var children = stringifiedChildren;\n\n  if (primaryText || secondaryText || textChildren) {\n    children = React.createElement(ListItemText, {\n      className: textClassName,\n      secondaryText: secondaryText,\n      secondaryTextClassName: secondaryTextClassName\n    }, textChildren && children || primaryText);\n  }\n\n  children = React.createElement(ListItemAddon, {\n    addon: leftAddon,\n    type: leftAddonType,\n    position: leftAddonPosition,\n    forceAddonWrap: forceAddonWrap\n  }, children);\n  children = React.createElement(ListItemAddon, {\n    addon: rightAddon,\n    addonAfter: true,\n    type: rightAddonType,\n    position: rightAddonPosition,\n    forceAddonWrap: forceAddonWrap\n  }, children);\n  return React.createElement(React.Fragment, null, children, primaryText && stringifiedChildren || null);\n}\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    ListItemChildren.propTypes = {\n      textClassName: PropTypes.string,\n      secondaryTextClassName: PropTypes.string,\n      textChildren: PropTypes.bool,\n      primaryText: PropTypes.node,\n      secondaryText: PropTypes.node,\n      leftAddon: PropTypes.node,\n      leftAddonType: PropTypes.oneOf([\"icon\", \"avatar\", \"media\", \"large-media\"]),\n      leftAddonPosition: PropTypes.oneOf([\"top\", \"middle\", \"bottom\"]),\n      rightAddon: PropTypes.node,\n      rightAddonType: PropTypes.oneOf([\"icon\", \"avatar\", \"media\", \"large-media\"]),\n      rightAddonPosition: PropTypes.oneOf([\"top\", \"middle\", \"bottom\"]),\n      forceAddonWrap: PropTypes.bool,\n      children: PropTypes.node\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../src/ListItemChildren.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { ListItemAddon, } from \"./ListItemAddon\";\nimport { ListItemText } from \"./ListItemText\";\n/**\n * The `ListItemChildren` component is used to create a styled list item that\n * can have optional addons to the left or right of the children in the form of\n * icons, avatars, or media. The `children` can be replaced by the `primaryText`\n * and `secondaryText` props to create stacked text spanning two or more lines\n * with the default behavior of using `line-clamp` at three lines.\n *\n * Note: This will return a `React.Fragment` of the children and does not wrap\n * in a DOM node for styling. The parent component should normally have\n * `display: flex` for the styling to work.\n */\nexport function ListItemChildren(_a) {\n    var textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, textChildren = _a.textChildren, primaryText = _a.primaryText, secondaryText = _a.secondaryText, leftAddon = _a.leftAddon, _b = _a.leftAddonType, leftAddonType = _b === void 0 ? \"icon\" : _b, _c = _a.leftAddonPosition, leftAddonPosition = _c === void 0 ? \"middle\" : _c, rightAddon = _a.rightAddon, _d = _a.rightAddonType, rightAddonType = _d === void 0 ? \"icon\" : _d, _e = _a.rightAddonPosition, rightAddonPosition = _e === void 0 ? \"middle\" : _e, forceAddonWrap = _a.forceAddonWrap, propChildren = _a.children;\n    var stringifiedChildren = typeof propChildren === \"number\" ? \"\" + propChildren : propChildren;\n    var children = stringifiedChildren;\n    if (primaryText || secondaryText || textChildren) {\n        children = (React.createElement(ListItemText, { className: textClassName, secondaryText: secondaryText, secondaryTextClassName: secondaryTextClassName }, (textChildren && children) || primaryText));\n    }\n    children = (React.createElement(ListItemAddon, { addon: leftAddon, type: leftAddonType, position: leftAddonPosition, forceAddonWrap: forceAddonWrap }, children));\n    children = (React.createElement(ListItemAddon, { addon: rightAddon, addonAfter: true, type: rightAddonType, position: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children));\n    return (React.createElement(React.Fragment, null,\n        children,\n        (primaryText && stringifiedChildren) || null));\n}\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        ListItemChildren.propTypes = {\n            textClassName: PropTypes.string,\n            secondaryTextClassName: PropTypes.string,\n            textChildren: PropTypes.bool,\n            primaryText: PropTypes.node,\n            secondaryText: PropTypes.node,\n            leftAddon: PropTypes.node,\n            leftAddonType: PropTypes.oneOf([\n                \"icon\",\n                \"avatar\",\n                \"media\",\n                \"large-media\",\n            ]),\n            leftAddonPosition: PropTypes.oneOf([\"top\", \"middle\", \"bottom\"]),\n            rightAddon: PropTypes.node,\n            rightAddonType: PropTypes.oneOf([\n                \"icon\",\n                \"avatar\",\n                \"media\",\n                \"large-media\",\n            ]),\n            rightAddonPosition: PropTypes.oneOf([\"top\", \"middle\", \"bottom\"]),\n            forceAddonWrap: PropTypes.bool,\n            children: PropTypes.node,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=ListItemChildren.js.map"]},"metadata":{},"sourceType":"module"}